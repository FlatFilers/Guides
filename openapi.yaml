openapi: 3.0.0
servers:
  - url: "https://api.x.flatfile.com/v1"
  - url: "http://localhost:3000/v1"
info:
  description: "Build your next data integration on Flatfile's data exchange platform. This API provides access to Flatfile workbooks, and all the tools required to build a workflow out of them."
  version: 1.0.0
  title: Flatfile Platform API
tags:
  - name: Auth
    description: Manage authentication in Flatfile.
  - name: Billing
    description: Manage billing and subscriptions for Flatfile services.
  - name: Users & Guests
    description: Manage users within an account and guests within an environment.
  - name: Environments
    description: "Manage environments, the starting place for every Flatfile integration."
  - name: Events
    description: Manage events within your environment.
  - name: Agents
    description: Manage agents to respond to events.
  - name: Spaces
    description: "Manage spaces, and documents within those spaces."
  - name: Workbooks
    description: Manage workbooks within a space.
  - name: Sheets
    description: Manage sheets within a workbook.
  - name: Snapshots
    description: Manage snapshots of sheets.
  - name: Records
    description: Manage records within a sheet.
  - name: Cells
    description: Manage cell values within a sheet.
  - name: Commits
    description: Manage commits and commit layers.
  - name: Files
    description: Manage files within a space.
  - name: Jobs
    description: "Manage jobs for a space, workbook, or file."
  - name: Secrets
    description: "Manage secret values for agents to access services"
  - name: Webhook
    description: Manage webhooks.
  - name: Mapping
    description: Map Blueprints.
  - name: Data Retention Policies
    description: Manage the data retention policy on an environment
paths:
  /assistant/generate-mutation:
    post:
      x-internal: true
      tags:
        - Jobs
      operationId: aiAssistGenerateMutation
      summary: AI generated mutateRecord
      description: Get the AI assistant to write a mutateRecord function
      requestBody:
        $ref: "#/components/requestBodies/GenerateMutation"
      responses:
        "200":
          $ref: "#/components/responses/GeneratedMutationResponse"
        "400":
          $ref: "#/components/responses/Error"
        "403":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /assistant/generate-query:
    post:
      x-internal: true
      operationId: aiAssistGenerateQuery
      summary: AI generated query
      description: Get the AI assistant to write a query function
      requestBody:
        $ref: "#/components/requestBodies/GenerateQuery"
      responses:
        "200":
          $ref: "#/components/responses/GeneratedQueryResponse"
        "400":
          $ref: "#/components/responses/Error"
        "403":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /accounts/current:
    get:
      tags:
        - Auth
      security:
        - BearerAuth: []
      operationId: getCurrentAccount
      summary: Get the current account
      description: Get the account information for the currently authenticated user.
      responses:
        "200":
          $ref: "#/components/responses/Account"
  /auth:
    post:
      tags:
        - Auth
      operationId: createAccessToken
      summary: Create an access token
      description: Exchange credentials for an access token. Credentials can be a Client ID and Secret or an Email and Password
      requestBody:
        $ref: "#/components/requestBodies/Credentials"
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /auth/access-token:
    post:
      deprecated: true
      x-internal: true
      tags:
        - Auth
      operationId: getAccessToken
      summary: Authenticate with secret and clientId
      description: Authenticate with secret and clientId
      requestBody:
        $ref: "#/components/requestBodies/AccessTokenCredentials"
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /auth/api-keys:
    get:
      tags:
        - Auth
      operationId: getApiKeys
      summary: Obtain the API keys for a specific environment
      parameters:
        - name: environmentId
          in: query
          description: ID of environment to search
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ApiKeys"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /auth/api-key:
    post:
      tags:
        - Auth
      operationId: createNewApiKey
      summary: Create a new API key of the specified type for the given environment
      parameters:
        - name: environmentId
          in: query
          description: ID of environment to search
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: API key type (SECRET or PUBLISHABLE)
          required: true
          schema:
            type: string
            enum:
              - PUBLISHABLE
              - SECRET
      responses:
        "200":
          $ref: "#/components/responses/ApiKeys"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Auth
      operationId: deleteApiKey
      summary: Delete the specified API key
      parameters:
        - name: environmentId
          in: query
          description: ID of environment to search
          required: true
          schema:
            type: string
        - name: key
          in: query
          description: The API key to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /billing/products:
    get:
      x-internal: true
      tags:
        - Billing
      operationId: getProducts
      summary: List the available products
      parameters:
        - name: filterMetadata
          in: query
          description: Filter products based on metadata
          schema:
            type: object
      responses:
        "200":
          $ref: "#/components/responses/Products"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

  /billing/checkoutsession/create:
    post:
      x-internal: true
      tags:
        - Billing
      operationId: createCheckoutSession
      summary: Creates a checkout session
      requestBody:
        $ref: "#/components/requestBodies/CheckoutSession"
      responses:
        "201":
          $ref: "#/components/responses/CreateCheckoutSession"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /billing/plan:
    get:
      x-internal: true
      security:
        - BearerAuth: []
      tags:
        - Billing
      operationId: getPlan
      summary: Returns the plan for the current user
      responses:
        "200":
          $ref: "#/components/responses/BillingPlanWithUsageResponse"
        "400":
          $ref: "#/components/responses/Error"
        "403":
          $ref: "#/components/responses/Error"
  /billing/limits:
    get:
      x-internal: true
      security:
        - BearerAuth: []
      tags:
        - Billing
      operationId: getLimits
      summary: Returns the limits for the current user
      responses:
        "200":
          $ref: "#/components/responses/BillingLimitsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /billing/subscriptions:
    get:
      x-internal: true
      security:
        - BearerAuth: []
      tags:
        - Billing
      operationId: getSubscriptions
      summary: Returns the subscriptions for the current user
      responses:
        "200":
          $ref: "#/components/responses/BillingSubscriptions"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      x-internal: true
      tags:
        - Billing
      operationId: cancelSubscriptions
      summary: Cancels all the subscriptions for the current user
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /billing/subscription/{subscriptionId}:
    put:
      x-internal: true
      tags:
        - Billing
      operationId: updateSubscription
      summary: Updates the given subscriptions line items
      parameters:
        - in: path
          name: subscriptionId
          required: true
          schema:
            $ref: "#/components/schemas/BillingSubscriptionId"
      requestBody:
        $ref: "#/components/requestBodies/SubscriptionUpdates"
      responses:
        "200":
          $ref: "#/components/responses/BillingSubscription"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      x-internal: true
      tags:
        - Billing
      operationId: cancelSubscription
      summary: Cancels the given subscription
      parameters:
        - in: path
          name: subscriptionId
          required: true
          schema:
            $ref: "#/components/schemas/BillingSubscriptionId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /commits:
    post:
      tags:
        - Commits
      operationId: createCommitId
      summary: Create a commit id
      description: Creates a new commit id that can be used to group record updates
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CommitsPostRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/Version"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /commits/{commitId}:
    get:
      tags:
        - Commits
      operationId: getCommit
      summary: Returns the details of a commit version
      parameters:
        - in: path
          name: commitId
          required: true
          schema:
            $ref: "#/components/schemas/CommitId"
      responses:
        "200":
          $ref: "#/components/responses/GetCommitResponse"
  /commits/{commitId}/complete:
    post:
      tags:
        - Commits
      security:
        - BearerAuth: []
      operationId: completeCommit
      summary: Complete a commit version
      description: Completes a commit version. This marks the commit as complete and acknowledges that the changes have been applied to the sheet.
      parameters:
        - in: path
          name: commitId
          schema:
            $ref: "#/components/schemas/CommitId"
          required: true
          description: ID of the commit version to complete
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /commits/{commitId}/replay:
    post:
      tags:
        - Commits
      security:
        - BearerAuth: []
      operationId: replayCommit
      summary: Replay a commit:created event
      description: Replays a commit:created event.
      parameters:
        - in: path
          name: commitId
          schema:
            $ref: "#/components/schemas/CommitId"
          required: true
          description: ID of the commit version to re-emit the commit:created event for
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

  /users:
    get:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      operationId: getUsers
      summary: List users
      description: Gets a list of users
      parameters:
        - name: email
          in: query
          description: Email of guest to return
          required: false
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Users"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      x-internal: true
      operationId: createUser
      summary: Create a user
      description: Creates a user
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        "200":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/users/{userId}":
    get:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      operationId: getUser
      summary: Get a user
      description: Gets a user
      parameters:
        - in: path
          name: userId
          schema:
            $ref: "#/components/schemas/UserId"
          required: true
          description: The user id
      responses:
        "200":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/users/{userId}/api-token":
    post:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      operationId: createApiToken
      summary: Create an API token
      description: Creates an api token for authenticating against Flatfile APIs
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
        - in: query
          name: tenantId
          required: true
          schema:
            type: string
      responses:
        "201":
          $ref: "#/components/responses/ApiToken"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    get:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      summary: List all tokens
      description: Gets all the api tokens for a user
      operationId: getApiTokens
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
        - in: query
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of tokens to return in a page (default 10)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of records to return"
      responses:
        "200":
          $ref: "#/components/responses/ApiTokens"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /frontegg/sign-up:
    post:
      tags:
        - Frontegg
        - Internal
      operationId: handleUserSignUp
      summary: Handle user sign up webhooks
      description: Receives data when a user is signed up with Frontegg
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FronteggSignup"
      responses:
        "200":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
      x-internal: true
  /frontegg/invite:
    post:
      tags:
        - Frontegg
        - Internal
      operationId: handleUserInvite
      summary: Handle user invite webhooks
      description: Receives data when a user is invited with Frontegg
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FronteggSignup"
      responses:
        "200":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
      x-internal: true
  /frontegg/accept-invite:
    post:
      tags:
        - Frontegg
        - Internal
      operationId: handleAcceptInvite
      summary: Handle accept invite webhooks
      description: Receives data when a user accepted the invite with Frontegg
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FronteggSignup"
      responses:
        "200":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
      x-internal: true
  /health:
    get:
      tags:
        - Internal
      operationId: getHealthCheck
      summary: Health check
      responses:
        "200":
          $ref: "#/components/responses/Health"
      x-internal: true
  /version:
    get:
      tags:
        - Internal
      operationId: getApiVersionDetails
      summary: Version details for the API
      responses:
        "200":
          $ref: "#/components/responses/AppVersion"
      x-internal: true
  /data-retention-policies:
    get:
      tags:
        - Data Retention Policies
      operationId: getDataRetentionPoliciesByAccount
      summary: Get data retention policy by account or filter by environment id
      description: Get a data retention policy by account or filter by environment id
      security:
        - BearerAuth: []
      parameters:
        - name: environmentId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      responses:
        "200":
          $ref: "#/components/responses/DataRetentionPolicyResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Data Retention Policies
      security:
        - BearerAuth: []
      operationId: createDataRetentionPolicy
      summary: Create a data retention policy
      description: Create a data retention policy on an environment
      requestBody:
        $ref: "#/components/requestBodies/DataRetentionPolicy"
      responses:
        "200":
          $ref: "#/components/responses/DataRetentionPolicyResponse"
        "400":
          $ref: "#/components/responses/Error"
        "403":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/data-retention-policies/{id}":
    get:
      tags:
        - Data Retention Policies
      security:
        - BearerAuth: []
      operationId: getDataRetentionPolicy
      summary: Get a data retention policy
      description: Get a data retention policy on an environment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/DataRetentionPolicyId"
      responses:
        "200":
          $ref: "#/components/responses/DataRetentionPolicyResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Data Retention Policies
      operationId: updateDataRetentionPolicy
      summary: Update a Data Retention Policy
      description: "Update a Data Retention Policy, to change the type for example"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of Data Retention Policy to update
          required: true
          schema:
            $ref: "#/components/schemas/DataRetentionPolicyId"
      requestBody:
        $ref: "#/components/requestBodies/DataRetentionPolicyUpdate"
      responses:
        "200":
          $ref: "#/components/responses/DataRetentionPolicyResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Data Retention Policies
      operationId: deleteDataRetentionPolicy
      summary: Deletes the given data retention policy
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/DataRetentionPolicyId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /files:
    get:
      tags:
        - Files
      security:
        - BearerAuth: []
      operationId: getFiles
      summary: List files
      parameters:
        - in: query
          name: spaceId
          schema:
            $ref: "#/components/schemas/SpaceId"
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of files to return in a page (default 20)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of files to return"
        - in: query
          name: mode
          description: The storage mode of file to fetch, defaults to "import"
          schema:
            $ref: "#/components/schemas/FileMode"
      responses:
        "200":
          $ref: "#/components/responses/Files"
    post:
      tags:
        - Files
      security:
        - BearerAuth: []
      operationId: createFile
      summary: Upload a file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                spaceId:
                  $ref: "#/components/schemas/SpaceId"
                environmentId:
                  $ref: "#/components/schemas/EnvironmentId"
                mode:
                  $ref: "#/components/schemas/FileMode"
                file:
                  type: string
                  format: binary
                  description: A binary payload containing the file contents
                actions:
                  type: array
                  items:
                    $ref: "#/components/schemas/Action"
        description: Request body object used to create a file
        required: true
      responses:
        "200":
          $ref: "#/components/responses/File"
        "400":
          $ref: "#/components/responses/Error"
  "/files/{fileId}":
    get:
      tags:
        - Files
      security:
        - BearerAuth: []
      operationId: getFile
      summary: Get a file
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            $ref: "#/components/schemas/FileId"
      responses:
        "200":
          $ref: "#/components/responses/File"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Files
      operationId: updateFileById
      summary: Update a File
      description: "Update a file, to change the workbook id for example"
      security:
        - BearerAuth: []
      parameters:
        - name: fileId
          in: path
          description: ID of file to update
          required: true
          schema:
            $ref: "#/components/schemas/FileId"
      requestBody:
        $ref: "#/components/requestBodies/File"
      responses:
        "200":
          $ref: "#/components/responses/File"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Files
      security:
        - BearerAuth: []
      operationId: deleteFile
      summary: Delete a file
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            $ref: "#/components/schemas/FileId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/files/{fileId}/download":
    get:
      tags:
        - Files
      security:
        - BearerAuth: []
      operationId: downloadFile
      summary: Download a file
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            $ref: "#/components/schemas/FileId"
      responses:
        "200":
          $ref: "#/components/responses/DownloadFile"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /environments:
    get:
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: getEnvironments
      summary: List environments
      description: Get all environments
      parameters:
        - in: query
          name: "pageSize"
          schema:
            type: integer
          description: Number of environments to return in a page (default 10)
        - in: query
          name: "pageNumber"
          schema:
            type: integer
          description: Based on pageSize, which page of environments to return
      responses:
        "200":
          $ref: "#/components/responses/Environments"
    post:
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: createEnvironment
      summary: Create an environment
      description: Create a new environment
      requestBody:
        $ref: "#/components/requestBodies/EnvironmentCreate"
      responses:
        "200":
          $ref: "#/components/responses/Environment"
        "400":
          $ref: "#/components/responses/Error"
  "/environments/{environmentId}":
    get:
      tags:
        - Environments
      operationId: getEnvironmentById
      summary: Get an environment
      description: Returns a single environment
      security:
        - BearerAuth: []
      parameters:
        - name: environmentId
          in: path
          description: ID of the environment to return. To fetch the current environment, pass `current`
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      responses:
        "200":
          $ref: "#/components/responses/Environment"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Environments
      operationId: updateEnvironmentById
      summary: Update an environment
      description: "Updates a single environment, to change the name for example"
      security:
        - BearerAuth: []
      parameters:
        - name: environmentId
          in: path
          description: ID of the environment to update
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      requestBody:
        $ref: "#/components/requestBodies/EnvironmentUpdate"
      responses:
        "200":
          $ref: "#/components/responses/Environment"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Environments
      operationId: deleteEnvironmentById
      summary: Delete an environment
      description: "Deletes a single environment"
      security:
        - BearerAuth: []
      parameters:
        - name: environmentId
          in: path
          description: ID of the environment to update
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/environments/{environmentId}/agents":
    get:
      deprecated: true
      x-internal: true
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: getAgentsDeprecated
      summary: List agents
      parameters:
        - in: path
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      responses:
        "200":
          $ref: "#/components/responses/Agents"
    post:
      deprecated: true
      x-internal: true
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: createAgentDeprecated
      summary: Create an agent
      parameters:
        - in: path
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      requestBody:
        $ref: "#/components/requestBodies/Agent"
      responses:
        "200":
          $ref: "#/components/responses/Agent"
        "400":
          $ref: "#/components/responses/Error"
  "/environments/{environmentId}/agents/{agentId}":
    get:
      deprecated: true
      x-internal: true
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: getAgentDeprecated
      summary: Get an agent
      parameters:
        - in: path
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: path
          name: agentId
          required: true
          schema:
            $ref: "#/components/schemas/AgentId"
      responses:
        "200":
          $ref: "#/components/responses/Agent"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/environments/{environmentId}/agents/{agentId}/logs":
    get:
      deprecated: true
      x-internal: true
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: getAgentLogsDeprecated
      summary: Get logs for an agent
      parameters:
        - in: path
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: path
          name: agentId
          required: true
          schema:
            $ref: "#/components/schemas/AgentId"
      responses:
        "200":
          $ref: "#/components/responses/AgentLogs"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/environments/{environmentId}/events":
    get:
      deprecated: true
      x-internal: true
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: getEventsDeprecated
      summary: List events
      parameters:
        - in: path
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: query
          name: spaceId
          schema:
            $ref: "#/components/schemas/SpaceId"
        - in: query
          name: domain
          schema:
            type: string
          description: Filter by event domain
        - in: query
          name: topic
          schema:
            type: string
          description: Filter by event topic
        - in: query
          name: since
          schema:
            type: string
            format: date-time
          description: Filter by event timestamp
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of results to return in a page (default 10)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of results to return"
        - in: query
          name: includeAcknowledged
          schema:
            type: boolean
            default: false
          description: Include acknowledged events
      responses:
        "200":
          $ref: "#/components/responses/Events"
    post:
      deprecated: true
      x-internal: true
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: createEventDeprecated
      summary: Create an event
      parameters:
        - in: path
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      requestBody:
        $ref: "#/components/requestBodies/Event"
      responses:
        "201":
          $ref: "#/components/responses/Event"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/environments/{environmentId}/events/{eventId}":
    get:
      deprecated: true
      x-internal: true
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: getEventDeprecated
      summary: Get an event
      parameters:
        - in: path
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: path
          name: eventId
          schema:
            $ref: "#/components/schemas/EventId"
          required: true
          description: The event id
      responses:
        "200":
          $ref: "#/components/responses/Event"
  "/environments/{environmentId}/events/{eventId}/ack":
    post:
      deprecated: true
      x-internal: true
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: ackEventDeprecated
      summary: Acknowledge an event
      parameters:
        - in: path
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: path
          name: eventId
          schema:
            $ref: "#/components/schemas/EventId"
          required: true
          description: The event id
      responses:
        "200":
          $ref: "#/components/responses/Success"
  "/environments/subscription-token":
    get:
      tags:
        - Environments
      security:
        - BearerAuth: []
      operationId: getEnvironmentEventToken
      summary: Get environment subscription credentials
      description: Get a token which can be used to subscribe to events for this environment
      parameters:
        - name: environmentId
          in: query
          description: ID of environment to return
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      responses:
        "200":
          $ref: "#/components/responses/EventToken"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

  /agents:
    get:
      tags:
        - Agents
      security:
        - BearerAuth: []
      operationId: getAgents
      summary: Get all agents
      parameters:
        - in: query
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      responses:
        "200":
          $ref: "#/components/responses/Agents"
    post:
      tags:
        - Agents
      security:
        - BearerAuth: []
      operationId: createAgent
      summary: Create an agent
      parameters:
        - in: query
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      requestBody:
        $ref: "#/components/requestBodies/Agent"
      responses:
        "200":
          $ref: "#/components/responses/Agent"
        "400":
          $ref: "#/components/responses/Error"

  "/agents/logs":
    get:
      tags:
        - Agents
      security:
        - BearerAuth: []
      operationId: getEnvironmentAgentLogs
      summary: Get all agent logs in your environment
      parameters:
        - in: query
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: query
          name: spaceId
          required: false
          schema:
            $ref: "#/components/schemas/SpaceId"
        - in: query
          name: success
          required: false
          schema:
            type: boolean
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of logs to return in a page (default 20)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of records to return"
      responses:
        "200":
          $ref: "#/components/responses/DetailedAgentLogs"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/agents/executions":
    get:
      tags:
        - Agents
      security:
        - BearerAuth: []
      operationId: getEnvironmentAgentExecutions
      summary: Get all executions in your environment
      parameters:
        - in: query
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: query
          name: spaceId
          required: false
          schema:
            $ref: "#/components/schemas/SpaceId"
        - in: query
          name: success
          required: false
          schema:
            type: boolean
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of logs to return in a page (default 20)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of records to return"
      responses:
        "200":
          $ref: "#/components/responses/Executions"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/agents/log/{eventId}":
    get:
      tags:
        - Agents
      security:
        - BearerAuth: []
      operationId: getEnvironmentAgentLog
      summary: Get an agent log
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            $ref: "#/components/schemas/EventId"
        - in: query
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      responses:
        "200":
          $ref: "#/components/responses/DetailedAgentLog"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/agents/stats":
    get:
      tags:
        - Internal
      security:
        - BearerAuth: []
      operationId: getEnvironmentStats
      summary: Get environment stats
      description: Returns environment stats
      parameters:
        - in: query
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - name: start
          in: query
          description: "Start time for stats, defaults to 7 days ago"
          required: false
          schema:
            type: string
            format: date-time
          example: "2020-12-01T07:00:00.000Z"
        - name: end
          in: query
          description: "End time for stats, defaults to now"
          required: false
          schema:
            type: string
            format: date-time
          example: "2020-12-01T07:00:00.000Z"
      responses:
        "200":
          $ref: "#/components/responses/EnvironmentStats"
        "403":
          $ref: "#/components/responses/Error"
      x-internal: true
  "/agents/{agentId}":
    get:
      tags:
        - Agents
      security:
        - BearerAuth: []
      operationId: getAgent
      summary: Get an agent
      parameters:
        - in: query
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: path
          name: agentId
          required: true
          schema:
            $ref: "#/components/schemas/AgentId"
      responses:
        "200":
          $ref: "#/components/responses/Agent"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Agents
      operationId: deleteAgent
      summary: Delete an agent
      description: "Deletes a single agent"
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - name: agentId
          in: path
          description: ID of the agent to delete
          required: true
          schema:
            $ref: "#/components/schemas/AgentId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/agents/{agentId}/logs":
    get:
      tags:
        - Agents
      security:
        - BearerAuth: []
      operationId: getAgentLogs
      summary: Get agent logs
      parameters:
        - in: path
          name: agentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: query
          name: environmentId
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of results to return in a page (default 20)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of results to return"
      responses:
        "200":
          $ref: "#/components/responses/AgentLogs"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /events:
    get:
      tags:
        - Events
      security:
        - BearerAuth: []
      operationId: getEvents
      summary: Get all events
      parameters:
        - in: query
          name: environmentId
          description: Filter by environment
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: query
          name: spaceId
          description: Filter by space
          schema:
            $ref: "#/components/schemas/SpaceId"
        - in: query
          name: domain
          description: Filter by event domain
          schema:
            type: string
        - in: query
          name: topic
          description: Filter by event topic
          schema:
            type: string
        - in: query
          name: since
          description: Filter by event timestamp
          schema:
            type: string
            format: date-time
        - in: query
          name: pageSize
          description: Number of results to return in a page (default 10)
          schema:
            type: integer
        - in: query
          name: pageNumber
          description: "Based on pageSize, which page of results to return"
          schema:
            type: integer
        - in: query
          name: includeAcknowledged
          description: Include acknowledged events
          schema:
            type: boolean
            default: false
      responses:
        "200":
          $ref: "#/components/responses/Events"
    post:
      tags:
        - Events
      security:
        - BearerAuth: []
      operationId: createEvent
      summary: Create an event
      requestBody:
        $ref: "#/components/requestBodies/Event"
      responses:
        "201":
          $ref: "#/components/responses/Event"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/events/{eventId}":
    get:
      tags:
        - Events
      security:
        - BearerAuth: []
      operationId: getEvent
      summary: Get an event
      parameters:
        - in: path
          name: eventId
          schema:
            $ref: "#/components/schemas/EventId"
          required: true
          description: The event id
      responses:
        "200":
          $ref: "#/components/responses/Event"
  "/events/{eventId}/ack":
    post:
      tags:
        - Events
      security:
        - BearerAuth: []
      operationId: ackEvent
      summary: Acknowledge an event
      parameters:
        - in: path
          name: eventId
          schema:
            $ref: "#/components/schemas/EventId"
          required: true
          description: The event id
      responses:
        "200":
          $ref: "#/components/responses/Success"
  /mapping:
    post:
      tags:
        - Mapping
        - Internal
      x-internal: true
      operationId: createMapping
      summary: Create a mapping plan from two blueprints
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - source
                - destination
              properties:
                source:
                  $ref: "#/components/schemas/SheetConfig"
                destination:
                  $ref: "#/components/schemas/SheetConfig"
      responses:
        "200":
          $ref: "#/components/responses/ProgramResponse"
        "400":
          $ref: "#/components/responses/Error"
    get:
      tags:
        - Mapping
        - Internal
      x-internal: true
      operationId: listMappingPrograms
      summary: Fetch a list of mapping programs
      parameters:
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of programs to return in a page (default 20)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of programs to return"
        - in: query
          name: createdBy
          schema:
            type: string
            description: Filter by user who created the program
        - in: query
          name: createdAfter
          schema:
            type: string
            format: date-time
            description: Filter by programs created after this date
        - in: query
          name: createdBefore
          schema:
            type: string
            format: date-time
            description: Filter by programs created before this date
        - in: query
          name: environmentId
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: query
          name: sourceKeys
          schema:
            type: string
        - in: query
          name: destinationKeys
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ProgramsResponse"
        "400":
          $ref: "#/components/responses/Error"

  /mapping/{programId}/rules:
    get:
      tags:
        - Mapping
        - Internal
      x-internal: true
      operationId: getRules
      parameters:
        - in: path
          name: programId
          schema:
            $ref: "#/components/schemas/ProgramId"
          required: true
          description: The mapping program id
      responses:
        "200":
          $ref: "#/components/responses/RulesResponse"
        "400":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Mapping
        - Internal
      x-internal: true
      operationId: createRule
      parameters:
        - in: path
          name: programId
          schema:
            $ref: "#/components/schemas/ProgramId"
          required: true
          description: The mapping program id
      requestBody:
        $ref: "#/components/requestBodies/RulesRequest"
      responses:
        "200":
          $ref: "#/components/responses/RulesResponse"
        "400":
          $ref: "#/components/responses/Error"
  /mapping/{programId}/rules/{id}:
    delete:
      tags:
        - Mapping
        - Internal
      x-internal: true
      operationId: deleteRule
      parameters:
        - in: path
          name: programId
          schema:
            $ref: "#/components/schemas/ProgramId"
          required: true
          description: The mapping program id
        - name: id
          in: path
          description: ID of rule to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Mapping
        - Internal
      x-internal: true
      operationId: updateRule
      parameters:
        - in: path
          name: programId
          schema:
            $ref: "#/components/schemas/ProgramId"
          required: true
          description: The mapping program id
        - name: id
          in: path
          description: ID of rule to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MappingRuleConfig"
      responses:
        "200":
          $ref: "#/components/responses/RuleResponse"
        "400":
          $ref: "#/components/responses/Error"
  /mapping/field-weights:
    post:
      tags:
        - Mapping
        - Internal
      x-internal: true
      operationId: getFieldWeights
      requestBody:
        $ref: "#/components/requestBodies/GetFieldWeightsRequest"
      responses:
        "200":
          $ref: "#/components/responses/SourceDestinationWeightsResponse"
        "400":
          $ref: "#/components/responses/Error"
  /mapping/enum-weights:
    post:
      tags:
        - Mapping
        - Internal
      x-internal: true
      operationId: getEnumWeights
      requestBody:
        $ref: "#/components/requestBodies/GetEnumWeightsRequest"
      responses:
        "200":
          $ref: "#/components/responses/SourceDestinationWeightsResponse"
        "400":
          $ref: "#/components/responses/Error"

  /jobs:
    get:
      tags:
        - Jobs
      security:
        - BearerAuth: []
      operationId: getJobs
      summary: List jobs
      parameters:
        - in: query
          name: environmentId
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: query
          name: spaceId
          schema:
            $ref: "#/components/schemas/SpaceId"
        - in: query
          name: workbookId
          schema:
            $ref: "#/components/schemas/WorkbookId"
        - in: query
          name: fileId
          schema:
            $ref: "#/components/schemas/FileId"
        - in: query
          name: parentId
          schema:
            $ref: "#/components/schemas/JobId"
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of jobs to return in a page (default 20)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of jobs to return"
        - in: query
          name: sortDirection
          schema:
            $ref: "#/components/schemas/SortDirection"
      responses:
        "200":
          $ref: "#/components/responses/Jobs"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Jobs
      security:
        - BearerAuth: []
      operationId: createJob
      summary: Create a job
      requestBody:
        $ref: "#/components/requestBodies/Job"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}":
    get:
      tags:
        - Jobs
      security:
        - BearerAuth: []
      operationId: getJob
      summary: Get a job
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Jobs
      security:
        - BearerAuth: []
      operationId: updateJob
      summary: Update a job
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      requestBody:
        $ref: "#/components/requestBodies/JobUpdate"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Jobs
      security:
        - BearerAuth: []
      operationId: deleteJob
      summary: Delete a job
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}/plan":
    get:
      tags:
        - Jobs
      operationId: getJobExecutionPlan
      summary: Get a job's execution plan
      description: Returns a single job's execution plan
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      responses:
        "200":
          $ref: "#/components/responses/JobPlan"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Jobs
      operationId: updateJobExecutionPlanFields
      summary: Update a job's plan
      description: Update a one or more individual fields on a job's execution plan
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      requestBody:
        $ref: "#/components/requestBodies/PlanConfig"
      responses:
        "202":
          $ref: "#/components/responses/JobPlan"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    put:
      tags:
        - Jobs
      operationId: updateJobExecutionPlanById
      summary: Replace a job's plan
      description: Update a job's entire execution plan
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      requestBody:
        $ref: "#/components/requestBodies/Plan"
      responses:
        "202":
          $ref: "#/components/responses/JobPlan"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}/execute":
    post:
      tags:
        - Jobs
      operationId: executeJob
      summary: Execute a job
      description: Execute a job and return the job
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "422":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}/ack":
    post:
      tags:
        - Jobs
      operationId: ackJob
      summary: Acknowledge a job
      description: Acknowledge a job and return the job
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      requestBody:
        $ref: "#/components/requestBodies/JobAckDetails"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}/split":
    post:
      tags:
        - Jobs
      operationId: splitJob
      summary: Split a job
      description: Split a job and return the job
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      requestBody:
        $ref: "#/components/requestBodies/JobSplitDetails"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}/outcome/ack":
    post:
      tags:
        - Jobs
      operationId: acknowledgeJobOutcome
      summary: Acknowledges a job outcome
      description: Acknowledge a job outcome and return the job
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}/complete":
    post:
      tags:
        - Jobs
      operationId: completeJob
      summary: Complete a job
      description: Complete a job and return the job
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      requestBody:
        $ref: "#/components/requestBodies/JobCompleteDetails"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}/fail":
    post:
      tags:
        - Jobs
      operationId: failJob
      summary: Fail a job
      description: Fail a job and return the job
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      requestBody:
        $ref: "#/components/requestBodies/JobCompleteDetails"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}/cancel":
    post:
      tags:
        - Jobs
      operationId: cancelJob
      summary: Cancel a job
      description: Cancel a job and return the job
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      requestBody:
        $ref: "#/components/requestBodies/JobCancelDetails"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/jobs/{jobId}/retry":
    post:
      tags:
        - Jobs
      operationId: retryJob
      summary: Retry a job
      description: Retry a failed job and return the job
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            $ref: "#/components/schemas/JobId"
      responses:
        "200":
          $ref: "#/components/responses/Job"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

  /jobs/preview-mutation:
    post:
      tags:
        - Internal
      x-internal: true
      security:
        - BearerAuth: []
      operationId: previewMutation
      summary: Preview a mutation
      description: Preview a mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MutateJobConfig"
      responses:
        "200":
          $ref: "#/components/responses/DiffRecordsResponse"
        "400":
          $ref: "#/components/responses/Error"
  /jobs/stats:
    get:
      tags:
        - Internal
      security:
        - BearerAuth: []
      operationId: getJobsStats
      summary: Get job stats
      description: Returns job stats
      parameters:
        - name: start
          in: query
          description: "Start time for stats, defaults to 7 days ago"
          required: false
          schema:
            type: string
            format: date-time
          example: "2020-12-01T07:00:00.000Z"
        - name: end
          in: query
          description: "End time for stats, defaults to now"
          required: false
          schema:
            type: string
            format: date-time
          example: "2020-12-01T07:00:00.000Z"
      responses:
        "200":
          $ref: "#/components/responses/JobStats"
        "403":
          $ref: "#/components/responses/Error"
      x-internal: true
  /jobs/report:
    get:
      tags:
        - Internal
      security:
        - BearerAuth: []
      operationId: getJobPerformanceReport
      summary: Get job performance report
      description: Returns job performance report as a CSV
      responses:
        "200":
          description: Job performance report
          content:
            text/csv:
              schema:
                type: string
        "403":
          $ref: "#/components/responses/Error"
      x-internal: true
  /spaces/configs:
    get:
      deprecated: true
      x-internal: true
      tags:
        - Space Configs
      operationId: getAllSpaceConfigsDeprecated
      summary: List space configs
      description: Returns all space configs for an account
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: environmentId
          schema:
            $ref: "#/components/schemas/EnvironmentId"
      responses:
        "200":
          $ref: "#/components/responses/SpacePatterns"
        "400":
          $ref: "#/components/responses/Error"
    post:
      deprecated: true
      x-internal: true
      tags:
        - Space Configs
      operationId: addSpaceConfigDeprecated
      summary: Create a space config
      description: Creates a new Space Config
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SpacePattern"
      responses:
        "201":
          $ref: "#/components/responses/SpacePattern"
        "400":
          $ref: "#/components/responses/Error"
    put:
      deprecated: true
      x-internal: true
      tags:
        - Space Configs
      operationId: replaceSpaceConfigDeprecated
      summary: Replace a space config
      description: Replaces an existing Space Config and optionally migrates all spaces using the config
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: migrate
          schema:
            type: boolean
      requestBody:
        $ref: "#/components/requestBodies/SpacePattern"
      responses:
        "201":
          $ref: "#/components/responses/SpacePattern"
        "400":
          $ref: "#/components/responses/Error"
  /space-configs:
    get:
      deprecated: true
      x-internal: true
      tags:
        - Space Configs
      operationId: getAllSpaceConfigs
      summary: Get all space configs
      description: Returns all space configs for an account
      security:
        - BearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/SpacePatterns"
        "400":
          $ref: "#/components/responses/Error"
    post:
      deprecated: true
      x-internal: true
      tags:
        - Space Configs
      operationId: addSpaceConfig
      summary: Create a space config
      description: Creates a new Space Config
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SpacePattern"
      responses:
        "201":
          $ref: "#/components/responses/SpacePattern"
        "400":
          $ref: "#/components/responses/Error"
    put:
      deprecated: true
      x-internal: true
      tags:
        - Space Configs
      operationId: updateSpaceConfig
      summary: Update a space config
      description: Updates an existing Space Config and optionally migrates all spaces using the config
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: migrate
          schema:
            type: boolean
      requestBody:
        $ref: "#/components/requestBodies/SpacePattern"
      responses:
        "201":
          $ref: "#/components/responses/SpacePattern"
        "400":
          $ref: "#/components/responses/Error"
  /spaces:
    get:
      tags:
        - Spaces
      operationId: getAllSpaces
      summary: Get all spaces
      description: Returns all spaces for an account or environment
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: environmentId
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of spaces to return in a page (default 10)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of records to return"
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sortField
          schema:
            $ref: "#/components/schemas/GetSpacesSortField"
        - in: query
          name: sortDirection
          schema:
            $ref: "#/components/schemas/SortDirection"
        - in: query
          name: archived
          schema:
            type: boolean
        - in: query
          name: isCollaborative
          schema:
            type: boolean
      responses:
        "200":
          $ref: "#/components/responses/Spaces"
        "400":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Spaces
      operationId: addSpace
      summary: Create a space
      description: Creates a new space based on an existing Space Config
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/Space"
      responses:
        "200":
          $ref: "#/components/responses/Space"
        "400":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Spaces
      operationId: deleteSpacesById
      summary: Delete Spaces
      description: Delete multiple Spaces from an Environment
      security:
        - BearerAuth: []
      parameters:
        - name: spaceIds
          in: query
          description: The ids of the Spaces to be deleted
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SpaceId"
            maxItems: 20
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"
  "/spaces/{spaceId}":
    get:
      tags:
        - Spaces
      operationId: getSpaceById
      summary: Get a space
      description: Returns a single space
      security:
        - BearerAuth: []
      parameters:
        - name: spaceId
          in: path
          description: ID of space to return
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      responses:
        "200":
          $ref: "#/components/responses/Space"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Spaces
      operationId: updateSpaceById
      summary: Update a space
      description: "Update a space, to change the name for example"
      security:
        - BearerAuth: []
      parameters:
        - name: spaceId
          in: path
          description: ID of space to update
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      requestBody:
        $ref: "#/components/requestBodies/Space"
      responses:
        "200":
          $ref: "#/components/responses/Space"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Spaces
      operationId: deleteSpaceById
      summary: Delete a space
      description: Delete a space
      security:
        - BearerAuth: []
      parameters:
        - name: spaceId
          in: path
          description: ID of space to delete
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/spaces/{spaceId}/expire":
    post:
      x-internal: true
      tags:
        - Spaces
        - Internal
      operationId: expireSpaceById
      summary: Expire a Space, its Workbooks and Files
      description: Expire a space
      security:
        - BearerAuth: []
      parameters:
        - name: spaceId
          in: path
          description: ID of space to expire
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"

  "/spaces/{spaceId}/upgrade":
    post:
      tags:
        - Spaces
      x-internal: true
      operationId: upgradeSpaceById
      summary: Upgrade a space
      description: Upgrade a space
      security:
        - BearerAuth: []
      parameters:
        - name: spaceId
          in: path
          description: ID of space to upgrade
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      requestBody:
        $ref: "#/components/requestBodies/SpaceUpgrade"
      responses:
        "200":
          $ref: "#/components/responses/Space"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

  "/spaces/{spaceId}/activity":
    get:
      security:
        - BearerAuth: []
      operationId: getSpaceActivity
      summary: Get the activity for a Space
      description: Returns a list of activities that have occurred in a space and who initiated those activities
      parameters:
        - name: spaceId
          in: path
          description: ID of space
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
        - in: query
          name: sortField
          schema:
            $ref: "#/components/schemas/GetSpaceActivitySortField"
        - in: query
          name: sortDirection
          schema:
            $ref: "#/components/schemas/SortDirection"
        - name: pageSize
          in: query
          schema:
            type: integer
          description: Number of audit activites to return in a page (default 20)
        - name: pageNumber
          in: query
          schema:
            type: integer
          description: "Based on pageSize, which page of files to return"
        - name: activity
          in: query
          schema:
            $ref: "#/components/schemas/AuditActivity"
          allowReserved: true
          description: Filter by activity
        - name: since
          in: query
          schema:
            # The since value should be in the format of a date-time, but we
            # validate this query param in the controller to allow more
            # flexibility in the exact format.
            type: string
          allowReserved: true
          description: Filter by activity timestamp
      responses:
        "200":
          $ref: "#/components/responses/Activities"

  "/spaces/{spaceId}/auth":
    get:
      x-internal: true
      tags:
        - Internal
      security:
        - BearerAuth: []
      operationId: getSpaceAuth
      summary: Generates a new access token scoped to only this space
      description: Returns an access token for this space
      parameters:
        - name: spaceId
          in: path
          description: ID of the space
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/spaces/{spaceId}/documents":
    get:
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: getSpaceDocuments
      summary: List documents
      description: Returns all documents for a space
      parameters:
        - name: spaceId
          in: path
          description: ID of space to return
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      responses:
        "200":
          $ref: "#/components/responses/Documents"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Spaces
        - Documents
      operationId: addDocumentToSpace
      summary: Create a document
      description: Add a new document to the space
      security:
        - BearerAuth: []
      parameters:
        - name: spaceId
          in: path
          description: ID of space to add the document on
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      requestBody:
        $ref: "#/components/requestBodies/Document"
      responses:
        "200":
          $ref: "#/components/responses/Document"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/spaces/{spaceId}/documents/{documentId}":
    get:
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: getSpaceDocumentById
      summary: Get a document
      description: Returns a single document
      parameters:
        - name: spaceId
          in: path
          description: ID of space to return
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
        - name: documentId
          in: path
          description: ID of document to return
          required: true
          schema:
            $ref: "#/components/schemas/DocumentId"
      responses:
        "200":
          $ref: "#/components/responses/Document"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: updateSpaceDocument
      summary: Update a document
      description: "updates a single document, for only the body and title"
      parameters:
        - name: spaceId
          in: path
          description: ID of space to return
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
        - name: documentId
          in: path
          description: ID of document to return
          required: true
          schema:
            $ref: "#/components/schemas/DocumentId"
      requestBody:
        $ref: "#/components/requestBodies/Document"
      responses:
        "200":
          $ref: "#/components/responses/Document"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Spaces
      operationId: deleteSpaceDocument
      summary: Delete a document
      description: "Deletes a single document"
      security:
        - BearerAuth: []
      parameters:
        - name: spaceId
          in: path
          description: ID of space for document
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
        - name: documentId
          in: path
          description: ID of document to delete
          required: true
          schema:
            $ref: "#/components/schemas/DocumentId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/documents/{documentId}":
    get:
      tags:
        - Documents
      security:
        - BearerAuth: []
      operationId: getDocumentById
      summary: Get a document
      description: Returns a single document
      parameters:
        - name: documentId
          in: path
          description: ID of document to return
          required: true
          schema:
            $ref: "#/components/schemas/DocumentId"
      responses:
        "200":
          $ref: "#/components/responses/Document"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Documents
      security:
        - BearerAuth: []
      operationId: updateDocument
      summary: Update a document
      description: "updates a single document, for only the body and title"
      parameters:
        - name: documentId
          in: path
          description: ID of document to return
          required: true
          schema:
            $ref: "#/components/schemas/DocumentId"
      requestBody:
        $ref: "#/components/requestBodies/Document"
      responses:
        "200":
          $ref: "#/components/responses/Document"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Documents
      operationId: deleteDocument
      summary: Delete a document
      description: "Deletes a single document"
      security:
        - BearerAuth: []
      parameters:
        - name: documentId
          in: path
          description: ID of document to delete
          required: true
          schema:
            $ref: "#/components/schemas/DocumentId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /spaces/{spaceId}/createLink:
    post:
      x-internal: true
      tags:
        - Connections
      security:
        - BearerAuth: []
      operationId: createConnectionLink
      summary: Creates a Merge Link
      parameters:
        - name: spaceId
          in: path
          description: ID of space to return
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      requestBody:
        $ref: "#/components/requestBodies/CreateConnectionLinkRequest"
      responses:
        "201":
          $ref: "#/components/responses/CreateConnectionLinkResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /guests:
    get:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      operationId: getGuests
      summary: List guests
      description: Returns all guests
      parameters:
        - name: spaceId
          in: query
          description: ID of space to return
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
        - name: email
          in: query
          description: Email of guest to return
          required: false
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Guests"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Users & Guests
      operationId: addGuestToSpace
      summary: Create a guest
      description: Add a new guest to the space
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/Guests"
      responses:
        "200":
          $ref: "#/components/responses/Guests"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/guests/{guestId}":
    get:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      operationId: getSpaceGuestById
      summary: Get a guest
      description: Returns a single guest
      parameters:
        - name: guestId
          in: path
          description: ID of guest to return
          required: true
          schema:
            $ref: "#/components/schemas/GuestId"
      responses:
        "200":
          $ref: "#/components/responses/Guest"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

    patch:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      operationId: updateGuest
      summary: Update a guest
      description: "Updates a single guest, for example to change name or email"
      parameters:
        - name: guestId
          in: path
          description: ID of guest to return
          required: true
          schema:
            $ref: "#/components/schemas/GuestId"
      requestBody:
        $ref: "#/components/requestBodies/GuestUpdate"
      responses:
        "200":
          $ref: "#/components/responses/Guest"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      operationId: deleteGuest
      summary: Delete a guest
      description: Deletes a single guest
      parameters:
        - name: guestId
          in: path
          description: ID of guest to return
          required: true
          schema:
            $ref: "#/components/schemas/GuestId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/guests/{guestId}/token":
    get:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      operationId: getGuestToken
      summary: Get a guest token
      description: Returns a single guest token
      parameters:
        - name: guestId
          in: path
          description: ID of guest to return
          required: true
          schema:
            $ref: "#/components/schemas/GuestId"
        - name: spaceId
          in: query
          description: ID of space for which the token belongs. The guest must already be allowed to access the given space.
          required: false
          schema:
            $ref: "#/components/schemas/SpaceId"
      responses:
        "200":
          $ref: "#/components/responses/Exchange"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /invitations:
    post:
      tags:
        - Users & Guests
      security:
        - BearerAuth: []
      operationId: inviteGuests
      summary: Invite guests
      description: Sends an invite each guest
      requestBody:
        $ref: "#/components/requestBodies/Invite"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /invitations/exchange:
    post:
      tags:
        - Users & Guests
      operationId: exchangeInvitation
      summary: Exchange an invitation for an access token
      description: Exchange an invitation for an access token
      requestBody:
        $ref: "#/components/requestBodies/Exchange"
      responses:
        "200":
          $ref: "#/components/responses/Exchange"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/spaces/{spaceId}/subscription":
    get:
      tags:
        - Spaces
      deprecated: true
      x-internal: true
      security:
        - BearerAuth: []
      operationId: getEventTokenDeprecated
      summary: Get subscription credentials
      description: Get a token which can be used to subscribe to events for this space
      parameters:
        - name: spaceId
          in: path
          description: ID of space to return
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      responses:
        "200":
          $ref: "#/components/responses/EventToken"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/spaces/{spaceId}/archive":
    post:
      tags:
        - Spaces
      security:
        - BearerAuth: []
      operationId: archiveSpace
      summary: Archives a space
      parameters:
        - name: spaceId
          in: path
          description: ID of space to archive
          required: true
          schema:
            $ref: "#/components/schemas/SpaceId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/subscription":
    get:
      tags:
        - Events
      security:
        - BearerAuth: []
      operationId: getEventToken
      summary: Get subscription credentials
      description: Get a token which can be used to subscribe to events for this space
      parameters:
        - name: spaceId
          deprecated: true
          in: query
          description: ID of space to return
          schema:
            $ref: "#/components/schemas/SpaceId"
        - name: scope
          in: query
          description: ID of resource to get an event stream for, currently environment and space ids are allow
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/EventToken"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /workbooks:
    get:
      tags:
        - Workbooks
      operationId: getAllWorkbooks
      summary: List workbooks
      description: Returns all workbooks matching a filter for an account or space
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: spaceId
          schema:
            $ref: "#/components/schemas/SpaceId"
        - in: query
          name: includeCounts
          schema:
            type: boolean
          description: Include counts for the workbook
      responses:
        "200":
          $ref: "#/components/responses/Workbooks"
        "400":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Workbooks
      operationId: addWorkbook
      summary: Create a workbook
      description: Creates a workbook and adds it to a space
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/WorkbookConfig"
      responses:
        "201":
          $ref: "#/components/responses/Workbook"
        "400":
          $ref: "#/components/responses/Error"
  "/workbooks/{workbookId}":
    get:
      tags:
        - Workbooks
      operationId: getWorkbookById
      summary: Get a workbook
      description: Returns a single workbook
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook to return
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
      responses:
        "200":
          $ref: "#/components/responses/Workbook"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - Workbooks
      operationId: updateWorkbookById
      summary: Update a workbook
      description: Updates a workbook
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook to update
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
      requestBody:
        $ref: "#/components/requestBodies/WorkbookUpdate"
      responses:
        "200":
          $ref: "#/components/responses/Workbook"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Workbooks
      operationId: deleteWorkbookById
      summary: Delete a workbook
      description: Deletes a workbook and all of its record data permanently
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook to delete
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/workbooks/{workbookId}/commits":
    get:
      tags:
        - Workbooks
      operationId: getWorkbookCommits
      description: Returns the sheet commits for an entire workbook
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook to retrieve commits for
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
        - name: completed
          in: query
          schema:
            type: boolean
          description: If true, only return commits that have been completed. If false, only return commits that have not been completed. If not provided, return all commits.
      responses:
        "200":
          $ref: "#/components/responses/GetWorkbookCommitsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

  "/workbooks/{workbookId}/sheets":
    get:
      tags:
        - Workbooks
      deprecated: true
      x-internal: true
      operationId: getSheetsDeprecated
      description: Returns sheets from a workbook
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
      responses:
        "200":
          $ref: "#/components/responses/Sheets"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/workbooks/{workbookId}/rebuild":
    post:
      tags:
        - Workbooks
        - Internal
      operationId: rebuildWorkbook
      summary: Rebuild a workbook
      description: Rebuild a workbook
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook to rebuild
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
      x-internal: true
  "/workbooks/{workbookId}/clone":
    post:
      tags:
        - Workbooks
        - Internal
      operationId: cloneWorkbook
      summary: Clone a workbook within a space
      description: Clone a workbook
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook to clone
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
      responses:
        "200":
          $ref: "#/components/responses/Workbook"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
      x-internal: true
  "/workbooks/{workbookId}/sheets/{sheetId}/records":
    get:
      deprecated: true
      x-internal: true
      tags:
        - Workbooks
      operationId: getRecordsDeprecated
      summary: Get records
      description: Returns records from a sheet in a workbook
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - in: query
          name: versionId
          deprecated: true
          description: Deprecated, use `commitId` instead.
          schema:
            $ref: "#/components/schemas/VersionId"
        - in: query
          name: commitId
          schema:
            $ref: "#/components/schemas/CommitId"
        - in: query
          name: untilVersionId
          deprecated: true
          description: Deprecated, use `untilCommitId` instead.
          schema:
            $ref: "#/components/schemas/VersionId"
        - in: query
          name: untilCommitId
          schema:
            $ref: "#/components/schemas/CommitId"
        - in: query
          name: sinceVersionId
          deprecated: true
          description: Deprecated, use `sinceCommitId` instead.
          schema:
            $ref: "#/components/schemas/VersionId"
        - in: query
          name: sinceCommitId
          schema:
            $ref: "#/components/schemas/CommitId"
        - in: query
          name: sortField
          schema:
            $ref: "#/components/schemas/SortField"
        - in: query
          name: sortDirection
          schema:
            $ref: "#/components/schemas/SortDirection"
        - in: query
          name: filter
          schema:
            $ref: "#/components/schemas/Filter"
        - in: query
          name: filterField
          schema:
            $ref: "#/components/schemas/FilterField"
        - in: query
          name: searchValue
          schema:
            $ref: "#/components/schemas/SearchValue"
        - in: query
          name: searchField
          schema:
            $ref: "#/components/schemas/SearchField"
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of records to return in a page (default 1000 if pageNumber included)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of records to return"
        - in: query
          name: includeCounts
          schema:
            type: boolean
          description: "Include counts for the total records, valid records, and records with errors. Note that when including counts with getRecords, we return only the length for pagination. If you need detailed error counts, fetch those separately from the counts endpoint."
        - in: query
          name: includeLinks
          description: "If true, linked records will be included in the results. Defaults to false"
          schema:
            type: boolean
        - in: query
          name: includeMessages
          schema:
            type: boolean
          description: "Include error messages, defaults to false"
      responses:
        "200":
          $ref: "#/components/responses/RecordsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    post:
      deprecated: true
      x-internal: true
      tags:
        - Workbooks
      operationId: addRecordsDeprecated
      summary: Insert records
      description: Adds records to a workbook sheet
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      requestBody:
        $ref: "#/components/requestBodies/RecordsData"
      responses:
        "201":
          $ref: "#/components/responses/RecordsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    put:
      deprecated: true
      x-internal: true
      tags:
        - Workbooks
      operationId: updateRecordsDeprecated
      summary: Update records
      description: Updates existing records in a workbook sheet
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      requestBody:
        $ref: "#/components/requestBodies/RecordsUpdates"
      responses:
        "200":
          $ref: "#/components/responses/Version"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      deprecated: true
      x-internal: true
      tags:
        - Workbooks
      operationId: deleteRecordsDeprecated
      summary: Delete records
      description: Deletes records from a workbook sheet
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - in: query
          name: ids
          description: The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RecordId"
            maxItems: 100
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/workbooks/{workbookId}/sheets/{sheetId}/validate":
    post:
      deprecated: true
      x-internal: true
      tags:
        - Workbooks
      operationId: validateSheetDeprecated
      summary: Validate sheet
      description: Trigger data hooks and validation to run on a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/workbooks/{workbookId}/sheets/{sheetId}/versions":
    post:
      deprecated: true
      x-internal: true
      tags:
        - Workbooks
      operationId: createVersionDeprecated
      summary: Create a version
      description: Creates a new version of a workbook sheet
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: path
          description: ID of workbook
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      responses:
        "201":
          $ref: "#/components/responses/Version"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

  # --- Secrets ---
  /secrets:
    get:
      tags:
        - Secrets
      operationId: getSecrets
      summary: List all Secrets for an Environment or Environment + Space
      description: Fetch all secrets for a given environmentId and optionally apply space overrides
      security:
        - BearerAuth: []
      parameters:
        - name: environmentId
          in: query
          description: Id of the Environment to query
          required: true
          schema:
            $ref: "#/components/schemas/EnvironmentId"
        - name: spaceId
          in: query
          description: Id of the Space to apply overrides from
          required: false
          schema:
            $ref: "#/components/schemas/SpaceId"
      responses:
        "200":
          $ref: "#/components/responses/Secrets"
        "400":
          $ref: "#/components/responses/Error"
        "403":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Secrets
      operationId: upsertSecret
      summary: Upsert a Secret
      description: Insert or Update a Secret by name for environment or space
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/WriteSecret"
      responses:
        "201":
          $ref: "#/components/responses/Secrets"
        "400":
          $ref: "#/components/responses/Error"
        "403":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /secrets/{secretId}:
    delete:
      tags:
        - Secrets
      operationId: deleteSecrets
      summary: Delete a Secret by ID
      description: Deletes a specific Secret from the Environment or Space as is the case
      security:
        - BearerAuth: []
      parameters:
        - name: secretId
          in: path
          description: id of Secret to delete
          required: true
          schema:
            $ref: "#/components/schemas/SecretId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "403":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

  /roles/{roleId}/assign:
    post:
      tags:
        - Roles
      operationId: assignRole
      summary: Assign a role
      description: Assign an existing role to the specified actor in the specified resource context
      security:
        - BearerAuth: []
      parameters:
        - name: roleId
          in: path
          description: ID of Role to assign
          required: true
          schema:
            $ref: "#/components/schemas/RoleId"
      requestBody:
        $ref: "#/components/requestBodies/ActorResource"
      responses:
        "201":
          $ref: "#/components/responses/AssignRoleResponse"
        "400":
          $ref: "#/components/responses/Error"
        "403":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

  /sheets:
    get:
      tags:
        - Sheets
      operationId: getSheets
      summary: Get all sheets
      description: Returns sheets from a workbook
      security:
        - BearerAuth: []
      parameters:
        - name: workbookId
          in: query
          description: ID of workbook
          required: true
          schema:
            $ref: "#/components/schemas/WorkbookId"
      responses:
        "200":
          $ref: "#/components/responses/Sheets"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}":
    get:
      tags:
        - Sheets
      operationId: getSheet
      summary: Get a sheet
      description: Returns a specific sheet from a workbook
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      responses:
        "200":
          $ref: "#/components/responses/Sheet"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Sheets
      operationId: deleteSheet
      summary: Delete a sheet
      description: Deletes a specific sheet from a workbook
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/counts":
    get:
      tags:
        - Sheets
      operationId: getCounts
      summary: Get record counts
      description: Returns counts of records from a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - in: query
          name: versionId
          deprecated: true
          description: Deprecated, use `commitId` instead.
          schema:
            $ref: "#/components/schemas/VersionId"
        - in: query
          name: commitId
          schema:
            $ref: "#/components/schemas/CommitId"
        - in: query
          name: sinceVersionId
          deprecated: true
          description: Deprecated, use `sinceCommitId` instead.
          schema:
            $ref: "#/components/schemas/VersionId"
        - in: query
          name: sinceCommitId
          schema:
            $ref: "#/components/schemas/CommitId"
        - in: query
          name: filter
          schema:
            $ref: "#/components/schemas/Filter"
        - in: query
          name: filterField
          schema:
            $ref: "#/components/schemas/FilterField"
        - in: query
          name: searchValue
          schema:
            $ref: "#/components/schemas/SearchValue"
        - in: query
          name: searchField
          schema:
            $ref: "#/components/schemas/SearchField"
        - in: query
          name: byField
          description: "If true, the error counts for each field will also be returned."
          schema:
            type: boolean
        - in: query
          name: q
          allowReserved: true
          description: "An [FFQL](https://flatfile.com/docs/developer-tools/flatfile_query_language) query used to filter the result set"
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/RecordCountsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/records":
    get:
      tags:
        - Records
      operationId: getRecords
      summary: Get records
      description: Returns records from a sheet in a workbook
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - in: query
          name: versionId
          deprecated: true
          description: Deprecated, use `commitId` instead.
          schema:
            $ref: "#/components/schemas/VersionId"
        - in: query
          name: commitId
          schema:
            $ref: "#/components/schemas/CommitId"
        - in: query
          name: sinceVersionId
          deprecated: true
          description: Deprecated, use `sinceCommitId` instead.
          schema:
            $ref: "#/components/schemas/VersionId"
        - in: query
          name: sinceCommitId
          schema:
            $ref: "#/components/schemas/CommitId"
        - in: query
          name: sortField
          schema:
            $ref: "#/components/schemas/SortField"
        - in: query
          name: sortDirection
          schema:
            $ref: "#/components/schemas/SortDirection"
        - in: query
          name: filter
          schema:
            $ref: "#/components/schemas/Filter"
        - in: query
          name: filterField
          schema:
            $ref: "#/components/schemas/FilterField"
        - in: query
          name: searchValue
          schema:
            $ref: "#/components/schemas/SearchValue"
        - in: query
          name: searchField
          schema:
            $ref: "#/components/schemas/SearchField"
        - in: query
          name: ids
          description: The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RecordId"
            maxItems: 100
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of records to return in a page (default 1000 if pageNumber included)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of records to return"
        - in: query
          name: includeLinks
          description: "If true, linked records will be included in the results. Defaults to false"
          schema:
            type: boolean
        - in: query
          name: includeMessages
          schema:
            type: boolean
          description: "Include error messages, defaults to false"
        - in: query
          name: for
          description: 'if "for" is provided, the query parameters will be pulled from the event payload'
          schema:
            $ref: "#/components/schemas/EventId"
        - in: query
          name: q
          allowReserved: true
          description: "An [FFQL](https://flatfile.com/docs/developer-tools/flatfile_query_language) query used to filter the result set"
          schema:
            type: string
        - in: query
          name: includeLength
          schema:
            type: boolean
          description: "The length of the record result set, returned as counts.total"
        - in: query
          name: includeCounts
          deprecated: true
          schema:
            type: boolean
          description: "**DEPRECATED** Use GET /sheets/:sheetId/counts"
      responses:
        "200":
          $ref: "#/components/responses/GetRecordsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - Records
      operationId: addRecords
      summary: Insert records
      description: Adds records to a workbook sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      requestBody:
        $ref: "#/components/requestBodies/RecordsData"
      responses:
        "201":
          $ref: "#/components/responses/RecordsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"
    put:
      tags:
        - Records
      operationId: updateRecords
      summary: Update records
      description: Updates existing records in a workbook sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - in: query
          name: for
          description: 'if "for" is provided, the query parameters will be pulled from the event payload'
          schema:
            $ref: "#/components/schemas/EventId"
      requestBody:
        $ref: "#/components/requestBodies/RecordsUpdates"
      responses:
        "200":
          $ref: "#/components/responses/Version"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Records
      operationId: deleteRecords
      summary: Delete records
      description: Deletes records from a workbook sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - in: query
          name: ids
          description: The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RecordId"
            maxItems: 100
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/validate":
    post:
      tags:
        - Sheets
      operationId: validateSheet
      summary: Validate sheet
      description: Trigger data hooks and validation to run on a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/download":
    get:
      tags:
        - Sheets
      operationId: getRecordsCsv
      summary: Download records as a CSV file
      description: Returns records from a sheet in a workbook as a csv file
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - in: query
          name: versionId
          deprecated: true
          description: Deprecated, use `commitId` instead.
          schema:
            $ref: "#/components/schemas/VersionId"
        - in: query
          name: commitId
          schema:
            $ref: "#/components/schemas/CommitId"
        - in: query
          name: sinceVersionId
          deprecated: true
          description: Deprecated, use `sinceCommitId` instead.
          schema:
            $ref: "#/components/schemas/VersionId"
        - in: query
          name: sinceCommitId
          schema:
            $ref: "#/components/schemas/CommitId"
        - in: query
          name: sortField
          schema:
            $ref: "#/components/schemas/SortField"
        - in: query
          name: sortDirection
          schema:
            $ref: "#/components/schemas/SortDirection"
        - in: query
          name: filter
          description: Options to filter records
          schema:
            $ref: "#/components/schemas/Filter"
        - in: query
          name: filterField
          schema:
            $ref: "#/components/schemas/FilterField"
        - in: query
          name: searchValue
          schema:
            $ref: "#/components/schemas/SearchValue"
        - in: query
          name: searchField
          schema:
            $ref: "#/components/schemas/SearchField"
        - in: query
          name: ids
          description: The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RecordId"
            maxItems: 100
      responses:
        "200":
          $ref: "#/components/responses/DownloadCsv"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/snapshots":
    post:
      tags:
        - Snapshots
      operationId: snapshotSheet
      summary: Create snapshot
      description: Create a snapshot of a sheet
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/Snapshot"
      responses:
        "200":
          $ref: "#/components/responses/SnapshotResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    get:
      tags:
        - Snapshots
      operationId: getSnapshots
      summary: List snapshots
      description: List all snapshots of a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: query
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      responses:
        "200":
          $ref: "#/components/responses/SnapshotsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/snapshots/{snapshotId}":
    put:
      deprecated: true
      x-internal: true
      tags:
        - Snapshots
      operationId: putSnapshot
      summary: Restore snapshot
      description: Restore a sheet to a previous snapshot
      security:
        - BearerAuth: []
      parameters:
        - name: snapshotId
          in: path
          description: ID of snapshot
          required: true
          schema:
            $ref: "#/components/schemas/SnapshotId"
      responses:
        "200":
          $ref: "#/components/responses/SnapshotResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    get:
      tags:
        - Snapshots
      operationId: getSnapshot
      summary: Get snapshot
      description: Get a snapshot of a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: snapshotId
          in: path
          description: ID of snapshot
          required: true
          schema:
            $ref: "#/components/schemas/SnapshotId"
        - name: includeSummary
          in: query
          description: "If true, the response will include a summary of the snapshot. Defaults to false."
          schema:
            type: boolean
      responses:
        "200":
          $ref: "#/components/responses/SnapshotResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - Snapshots
      operationId: deleteSnapshot
      summary: Delete snapshot
      description: Delete a snapshot of a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: snapshotId
          in: path
          description: ID of snapshot
          required: true
          schema:
            $ref: "#/components/schemas/SnapshotId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/snapshots/{snapshotId}/records":
    get:
      tags:
        - Snapshots
      operationId: getSnapshotRecords
      summary: Get records
      description: Get records from a time period
      security:
        - BearerAuth: []
      parameters:
        - name: snapshotId
          in: path
          description: ID of snapshot
          required: true
          schema:
            $ref: "#/components/schemas/SnapshotId"
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of records to return in a page (default 1000 if pageNumber included)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of records to return"
        - in: query
          name: changeType
          description: "Filter records by change type, defaults to updatedSince snapshot was first created"
          schema:
            type: string
            enum:
              - createdSince
              - updatedSince
              - deletedSince
      responses:
        "200":
          $ref: "#/components/responses/DiffRecordsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/snapshots/{snapshotId}/restore":
    post:
      tags:
        - Snapshots
      operationId: restoreSnapshot
      summary: Restore snapshot
      description: Restore a sheet to a previous snapshot
      security:
        - BearerAuth: []
      parameters:
        - name: snapshotId
          in: path
          description: ID of snapshot
          required: true
          schema:
            $ref: "#/components/schemas/SnapshotId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                created:
                  type: boolean
                updated:
                  type: boolean
                deleted:
                  type: boolean
      responses:
        "200":
          $ref: "#/components/responses/SnapshotResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/cells":
    get:
      tags:
        - Cells
      operationId: getCellValues
      summary: Get record cells by field
      description: Returns record cell values grouped by all fields in the sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - name: fieldKey
          in: query
          description: Returns results from the given field only. Otherwise all field cells are returned
          schema:
            type: string
            example: first_name
        - in: query
          name: sortField
          schema:
            $ref: "#/components/schemas/SortField"
        - in: query
          name: sortDirection
          schema:
            $ref: "#/components/schemas/SortDirection"
        - in: query
          name: filter
          description: Options to filter records
          schema:
            $ref: "#/components/schemas/Filter"
        - in: query
          name: filterField
          description: Works with the 'filter' param to exclude results not matching the filter option in a given field
          example: last_name
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of records to return in a page (default 1000 if pageNumber included)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of records to return"
        - in: query
          name: distinct
          schema:
            type: boolean
          description: "When true, excludes duplicate values"
        - in: query
          name: includeCounts
          schema:
            type: boolean
          description: "When both distinct and includeCounts are true, the count of distinct field values will be returned"
        - name: searchValue
          in: query
          description: A value to find for a given field in a sheet. Wrap the value in "" for exact match
          schema:
            type: string
            example: Bob
      responses:
        "200":
          $ref: "#/components/responses/CellsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/replace":
    put:
      deprecated: true
      x-internal: true
      tags:
        - Records
      operationId: replace
      summary: Finds and replaces all field values matching search criteria with a given value
      description: Searches for all field values that match the 'searchValue' and replaces them with the 'replaceValue'. Wrap 'searchValue' in double quotes for exact match (""). Returns updated records.
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - name: fieldKey
          in: query
          description: A unique key used to identify a field in a sheet
          required: true
          schema:
            type: string
            example: first_name
        - name: searchValue
          in: query
          description: A value to find for a given field in a sheet. Wrap the value in "" for exact match
          required: true
          schema:
            type: string
            example: foo
        - in: query
          name: filter
          schema:
            $ref: "#/components/schemas/Filter"
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of results to return in a page (default 1000 if pageNumber included)
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: "Based on pageSize, which page of results to return"
      requestBody:
        $ref: "#/components/requestBodies/ReplaceValue"
      responses:
        "200":
          $ref: "#/components/responses/RecordsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/find-replace":
    put:
      tags:
        - Records
      operationId: findAndReplace
      summary: Finds and replaces all field values matching search criteria with a given value
      description: Searches for all values that match the 'find' value (globally or for a specific field via 'fieldKey') and replaces them with the 'replace' value. Wrap 'find' value in double quotes for exact match (""). Returns a commitId for the updated records
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - name: filter
          in: query
          schema:
            $ref: "#/components/schemas/Filter"
        - name: filterField
          in: query
          schema:
            $ref: "#/components/schemas/FilterField"
        - name: searchValue
          in: query
          schema:
            $ref: "#/components/schemas/SearchValue"
        - name: searchField
          in: query
          schema:
            $ref: "#/components/schemas/SearchField"
        - name: ids
          in: query
          description: The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RecordId"
            maxItems: 100
      requestBody:
        $ref: "#/components/requestBodies/FindAndReplaceRequest"
      responses:
        "200":
          $ref: "#/components/responses/Version"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/fields":
    post:
      tags:
        - Sheets
      x-internal: true
      operationId: addField
      summary: Adds a new field to a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      requestBody:
        $ref: "#/components/requestBodies/FieldConfig"
      responses:
        "201":
          $ref: "#/components/responses/FieldConfigResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
        "409":
          $ref: "#/components/responses/Error"

  "/sheets/{sheetId}/fields/{fieldKey}":
    put:
      tags:
        - Sheets
      x-internal: true
      operationId: upsertField
      summary: Upserts a new field to a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - name: fieldKey
          in: path
          description: Unique field key
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/FieldConfig"
      responses:
        "201":
          $ref: "#/components/responses/FieldConfigResponse"
        "400":
          $ref: "#/components/responses/Error"

  "/sheets/{sheetId}/commits":
    get:
      tags:
        - Sheets
      operationId: getSheetCommits
      summary: Returns the commit versions for a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
        - name: completed
          in: query
          schema:
            type: boolean
          description: If true, only return commits that have been completed. If false, only return commits that have not been completed. If not provided, return all commits.
      responses:
        "200":
          $ref: "#/components/responses/GetSheetCommitsResponse"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/lock":
    post:
      tags:
        - Sheets
      operationId: lockSheet
      summary: Lock a sheet
      description: Locks a sheet to prevent further changes
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  "/sheets/{sheetId}/unlock":
    post:
      tags:
        - Sheets
      operationId: unlockSheet
      summary: Unlock a sheet
      description: Removes a lock from a sheet
      security:
        - BearerAuth: []
      parameters:
        - name: sheetId
          in: path
          description: ID of sheet
          required: true
          schema:
            $ref: "#/components/schemas/SheetId"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "403":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /versions:
    post:
      tags:
        - Versions
      deprecated: true
      operationId: createVersionId
      summary: Create a version id
      description: Deprecated. Use `/commits` endpoint instead.
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/VersionsPostRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/Version"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"
  /webhook/stripe:
    get:
      tags:
        - Webhook
      operationId: handleStripWebget
      summary: Handle an incoming GET request from Stripe
      description: Handles events coming from Stripe
      parameters:
        - name: session_id
          in: query
          description: The session id from Stripe
          required: true
          schema:
            type: string
            example: "cs_test_1234567890"
      responses:
        "200":
          $ref: "#/components/responses/Success"
    post:
      tags:
        - Webhook
      operationId: handleStripeWebhook
      summary: Handle an incoming Stripe webhook
      description: Handles events coming from Stripe
      requestBody:
        $ref: "#/components/requestBodies/StripeWebhook"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/Error"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  requestBodies:
    Credentials:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/UserCredentials"
              - $ref: "#/components/schemas/ApiCredentials"
      description: Credentials to authenticate an user
      required: true
    AccessTokenCredentials:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiCredentials"
    Document:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentConfig"
      description: Document object belonging to a Space
      required: true
    SpaceUpgrade:
      x-internal: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpgradeSpaceConfig"
    RecordsData:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RecordsData"
      description: Record data to insert in a sheet
      required: true
    RecordsUpdates:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RecordsUpdates"
      description: Record data to insert in a sheet
      required: true
    RecordsReplace:
      content:
        application/json:
          schema:
            type: object
            properties:
              replace:
                description: The value to replace found values with
      description: Data to replace found values with
      required: true
    ReplaceValue:
      description: Data to replace found values with
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              replaceValue:
                $ref: "#/components/schemas/Value"
    FindAndReplaceRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - find
              - replace
              - fieldKey
            properties:
              find:
                $ref: "#/components/schemas/Value"
              replace:
                $ref: "#/components/schemas/Value"
              fieldKey:
                type: string
                description: A unique key used to identify a field in a sheet
                example: first_name
    CommitsPostRequestBody:
      description: An optional sheetId and parent commitId
      content:
        application/json:
          schema:
            type: object
            properties:
              sheetId:
                $ref: "#/components/schemas/SheetId"
              parentCommitId:
                $ref: "#/components/schemas/CommitId"
    VersionsPostRequestBody:
      description: An optional sheetId and parent versionId
      content:
        application/json:
          schema:
            type: object
            properties:
              sheetId:
                $ref: "#/components/schemas/SheetId"
              parentVersionId:
                $ref: "#/components/schemas/VersionId"
    Snapshot:
      description: Config for creating a new snapshot
      content:
        application/json:
          schema:
            type: object
            required:
              - sheetId
            properties:
              label:
                type: string
                description: Label of the snapshot
                example: "My Snapshot"
              sheetId:
                $ref: "#/components/schemas/SheetId"
    SpacePattern:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SpacePatternConfig"
      description: Request body object used to create a space config
      required: true
    Space:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SpaceConfig"
      description: Request body object used to create a space
      required: true
    EnvironmentCreate:
      content:
        application/json:
          schema:
            required:
              - name
              - isProd
            allOf:
              - $ref: "#/components/schemas/EnvironmentConfig"
    EnvironmentUpdate:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/EnvironmentConfig"
      description: Request body object used to create a environment
      required: true
    File:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileConfig"
      description: Request body object used to update a file
      required: true
    Job:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobConfig"
      description: Job that will be added
      required: true
    JobUpdate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobUpdate"
      description: Job that will be updated
      required: true
    JobCompleteDetails:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobCompleteDetails"
        application/x-www-form-urlencoded: {}
      description: Job outcome that will be assigned
      required: false
    JobCancelDetails:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobCancelDetails"
        application/x-www-form-urlencoded: {}
      description: Info with the reason why the job was cancelled
      required: false
    JobAckDetails:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobAckDetails"
        application/x-www-form-urlencoded: {}
      description: Job ack info and progress that will be updated
      required: false
    JobSplitDetails:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobSplitDetails"
      description: Job split info
      required: true
    Plan:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Plan"
            properties:
              fileId:
                $ref: "#/components/schemas/FileId"
              jobId:
                $ref: "#/components/schemas/JobId"
      description: The execution plan for the job
      required: true
    PlanConfig:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/PlanConfig"
            properties:
              fileId:
                $ref: "#/components/schemas/FileId"
              jobId:
                $ref: "#/components/schemas/JobId"
      description: The execution plan for the job
      required: true
    GetFieldWeightsRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetFieldWeightsRequest"
      description: Request body object used to get field weights
      required: true
    GetEnumWeightsRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetEnumWeightsRequest"
      description: Request body object used to get enum weights
      required: true
    WorkbookConfig:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WorkbookConfig"
      description: The configurations for the workbook
      required: true
    WorkbookUpdate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WorkbookUpdate"
      description: The updates to be made to an existing workbook
    FieldConfig:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FieldConfig"
      description: The configurations for a field
      required: true
    CheckoutSession:
      content:
        application/json:
          schema:
            title: CheckoutSessionBody
            description: Checkout session request body
            type: object
            required:
              - lineItems
              - successUrl
            properties:
              lineItems:
                type: array
                items:
                  $ref: "#/components/schemas/LineItem"
              successUrl:
                type: string
    SubscriptionUpdates:
      content:
        application/json:
          schema:
            title: SubscriptionUpdatesBody
            description: Updates for a subscription
            type: object
            required:
              - lineItems
            properties:
              lineItems:
                type: array
                items:
                  $ref: "#/components/schemas/LineItem"
    User:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserConfig"
      description: Configurations for the user
      required: true
    Guest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GuestConfig"
      description: Configurations for the guest
      required: true
    GuestUpdate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GuestConfigUpdate"
      description: Configurations for the guest
      required: true
    Guests:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GuestConfig"
            minItems: 1
      description: Configurations for the guests
      required: true
    Invite:
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - guestId
                - spaceId
              properties:
                guestId:
                  $ref: "#/components/schemas/GuestId"
                spaceId:
                  $ref: "#/components/schemas/SpaceId"
                fromName:
                  type: string
                  description: The name of the person or company sending the invitation
                message:
                  type: string
                  description: Message to send with the invite
      description: Configurations for the guest
      required: true
    Exchange:
      description: "If no token is provided, include guest email and spaceId"
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                description: The token to use for the request
              email:
                type: string
                description: "The invited guest's email, required if no token"
              spaceId:
                type: string
                description: "The spaceId, required if no token"
    Event:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EventConfig"
      description: Configurations for the event
      required: true
    Agent:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AgentConfig"
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/AgentConfig"
      description: Configurations for the agent
      required: true
    GenerateMutation:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenerateMutationConfig"
      description: Configurations for the generate mutation
      required: true
    GenerateQuery:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenerateQueryConfig"
      description: Configurations for the generate query
      required: true
    StripeWebhook:
      description: Request body for a Stripe webhook request
      content:
        application/json:
          schema:
            title: StripeWebhookRequestBody
            type: object
            properties:
              id:
                type: string
                example: evt_1234567890
              object:
                type: string
                example: event
              data:
                type: object
              request:
                type: object
                properties:
                  id:
                    type: string
                    example: req_Im35AMOnLwyQwE
                    nullable: true
                  idempotency_key:
                    type: string
                    example: 8cb5469a-b1ca-45a0-82d4-c5122b388a9b
                    nullable: true
              type:
                type: string
                example: payment_intent.succeeded
    WriteSecret:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WriteSecret"
      description: A single Secrets value
    CreateConnectionLinkRequest:
      content:
        application/json:
          schema:
            title: ConnectionLinkBody
            description: Connection Link request body
            type: object
            required:
              - endUserOriginId
              - endUserOrganizationName
              - endUserEmailAddress
              - categories
            properties:
              endUserOriginId:
                type: string
              endUserOrganizationName:
                type: string
              endUserEmailAddress:
                type: string
              categories:
                type: array
                items:
                  type: string
              integration:
                type: string
              linkExpiryMins:
                type: integer
              shouldCreateMagicLinkUrl:
                type: boolean
    ActorResource:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ActorResource"
      description: A tuple that contains an ActorId and ResourceId
    DataRetentionPolicy:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DataRetentionPolicyConfig"
      description: Configurations for data retention policies
    DataRetentionPolicyUpdate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DataRetentionPolicyConfigUpdate"
      description: Configurations for Data Retention Policies

    RulesRequest:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/MappingRuleConfig"
      description: Configurations for Rules
      required: true

  responses:
    Health:
      content:
        application/json:
          schema:
            title: HealthResponse
            type: object
            properties:
              status:
                type: string
                description: Ok
                example: ok
      description: Health status of the service
    AppVersion:
      content:
        application/json:
          schema:
            title: AppVersionResponse
            type: object
            properties:
              commit:
                type: string
                description: git commit hash
                example: abc123
              version:
                type: string
                description: semantic version number for self host
                example: 1.0.8
      description: Health status of the service
    Account:
      description: Account response
      content:
        application/json:
          schema:
            title: AccountResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Account"
    AccessToken:
      description: AccessToken response
      content:
        application/json:
          schema:
            title: AccessTokenResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/AccessToken"
    ApiKeys:
      description: ApiKeys response
      content:
        application/json:
          schema:
            title: ApiKeysResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/ApiKey"
    EventToken:
      description: EventToken response
      content:
        application/json:
          schema:
            title: EventTokenResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/EventToken"
    ApiToken:
      description: ApiToken response
      content:
        application/json:
          schema:
            title: ApiTokenResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/ApiToken"
    ApiTokens:
      description: List of api tokens without secrets
      content:
        application/json:
          schema:
            title: ApiTokensResponse
            type: object
            properties:
              pagination:
                $ref: "#/components/schemas/Pagination"
              data:
                type: array
                items:
                  $ref: "#/components/schemas/ApiToken"
    Error:
      description: Error response
      content:
        application/json:
          schema:
            title: ErrorResponse
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - message
                  properties:
                    key:
                      type: string
                      description: Object type
                      example: "123"
                    message:
                      type: string
                      description: The message of the error
                      example: ID 123 not found
    JobStats:
      description: Jobs stats response
      content:
        application/json:
          schema:
            title: JobStatsResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/JobStats"
    Event:
      description: A single Event response
      content:
        application/json:
          schema:
            title: EventResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Event"
    Events:
      description: List of Events response
      content:
        application/json:
          schema:
            title: EventsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
    Agent:
      description: Agent response
      content:
        application/json:
          schema:
            title: AgentResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Agent"
    Agents:
      description: Agents response
      content:
        application/json:
          schema:
            title: AgentsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Agent"
    EnvironmentStats:
      description: Agent stats response
      content:
        application/json:
          schema:
            title: EnvironmentStatsResponse
            type: object
            properties:
              data:
                type: object
                properties:
                  agentExecutions:
                    $ref: "#/components/schemas/AgentStats"
    Files:
      description: List of Files response
      content:
        application/json:
          schema:
            title: FilesResponse
            type: object
            properties:
              pagination:
                $ref: "#/components/schemas/Pagination"
              data:
                type: array
                items:
                  $ref: "#/components/schemas/File"
    Job:
      description: Job response
      content:
        application/json:
          schema:
            title: JobResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Job"
    Jobs:
      description: List of Job objects
      content:
        application/json:
          schema:
            title: JobsResponse
            type: object
            properties:
              pagination:
                $ref: "#/components/schemas/Pagination"
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Job"
    JobPlan:
      description: Job configuration response
      content:
        application/json:
          schema:
            title: JobPlanResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/JobPlan"
    Workbook:
      description: Workbook response
      content:
        application/json:
          schema:
            title: WorkbookResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Workbook"
    Workbooks:
      description: Workbooks response
      content:
        application/json:
          schema:
            title: WorkbooksResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Workbook"
    GetRecordsResponse:
      description: Response for Get Records
      content:
        application/json:
          schema:
            title: GetRecordsResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/GetRecordsResponseData"
    GetCommitResponse:
      description: Response for Get Commit
      content:
        application/json:
          schema:
            title: GetCommitResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Commit"
    GetSheetCommitsResponse:
      description: Response for Get Sheet Commits
      content:
        application/json:
          schema:
            title: GetSheetCommitsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Commit"
    GetWorkbookCommitsResponse:
      description: Response for Get Workbook Commits
      content:
        application/json:
          schema:
            title: GetWorkbookCommitsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Commit"
    RecordsResponse:
      description: Records Response
      content:
        application/json:
          schema:
            title: RecordsResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/RecordsResponseData"
    DiffRecordsResponse:
      description: Diff Records Response
      content:
        application/json:
          schema:
            title: DiffRecordsResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/DiffRecordsResponseData"
    CellsResponse:
      description: "Grouping of Cell objects, listed by field key"
      content:
        application/json:
          schema:
            title: CellsResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/CellsResponseData"
    RecordCountsResponse:
      description: Record Counts Response
      content:
        application/json:
          schema:
            title: RecordCountsResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/RecordCountsResponseData"
    Version:
      description: Version response
      content:
        application/json:
          schema:
            title: VersionResponse
            type: object
            properties:
              data:
                type: object
                properties:
                  versionId:
                    $ref: "#/components/schemas/VersionId"
                  commitId:
                    $ref: "#/components/schemas/CommitId"
    Sheet:
      description: Sheet response
      content:
        application/json:
          schema:
            title: SheetResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Sheet"
    Sheets:
      description: List of Sheet objects
      content:
        application/json:
          schema:
            title: SheetsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Sheet"
    SnapshotResponse:
      description: Snapshot response
      content:
        application/json:
          schema:
            title: SnapshotResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Snapshot"
    SnapshotsResponse:
      description: List of Snapshot objects
      content:
        application/json:
          schema:
            title: SnapshotsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Snapshot"
    Space:
      description: Space response
      content:
        application/json:
          schema:
            title: SpaceResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Space"
    Spaces:
      description: List of Space objects
      content:
        application/json:
          schema:
            title: SpacesResponse
            type: object
            properties:
              pagination:
                $ref: "#/components/schemas/Pagination"
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Space"
    Activities:
      description: List of Activities
      content:
        application/json:
          schema:
            title: ActivitiesResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Activity"
              pagination:
                $ref: "#/components/schemas/Pagination"
    Environment:
      description: Environment response
      content:
        application/json:
          schema:
            title: EnvironmentResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Environment"
    File:
      description: File response
      content:
        application/json:
          schema:
            title: FileResponse
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/File"
    DownloadFile:
      content:
        application/json:
          schema:
            type: string
            format: binary
            description: A binary payload containing the file contents
        multipart/form-data:
          schema:
            type: string
            format: binary
            description: A binary payload containing the file contents
      description: Response containing a file
    DownloadCsv:
      content:
        text/csv:
          schema:
            type: string
            format: binary
            description: A binary payload containing the exported csv file
      description: Response containing an exported csv file
    Environments:
      description: List of Environment objects
      content:
        application/json:
          schema:
            title: EnvironmentsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Environment"
              pagination:
                $ref: "#/components/schemas/Pagination"

    SpacePatterns:
      description: List of Space patterns
      content:
        application/json:
          schema:
            title: SpaceConfigsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/SpacePattern"
    SpacePattern:
      description: Space pattern response
      content:
        application/json:
          schema:
            title: SpaceConfigResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/SpacePattern"
    Document:
      description: Document response
      content:
        application/json:
          schema:
            title: DocumentResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Document"
    Documents:
      description: Documents response
      content:
        application/json:
          schema:
            title: DocumentsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
    User:
      description: User response
      content:
        application/json:
          schema:
            title: UserResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/User"
    Users:
      description: List of User objects
      content:
        application/json:
          schema:
            title: UsersResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    Guest:
      description: Guest response
      content:
        application/json:
          schema:
            title: GuestResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Guest"
    Guests:
      description: List of Guest objects
      content:
        application/json:
          schema:
            title: GuestsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Guest"
    AgentLogs:
      description: Agent Logs response
      content:
        application/json:
          schema:
            title: AgentLogsResponse
            type: object
            properties:
              pagination:
                $ref: "#/components/schemas/Pagination"
              data:
                type: array
                items:
                  $ref: "#/components/schemas/AgentLog"
    DetailedAgentLogs:
      description: Agent Logs response
      content:
        application/json:
          schema:
            title: AgentLogsResponse
            type: object
            properties:
              pagination:
                $ref: "#/components/schemas/Pagination"
              data:
                type: array
                items:
                  $ref: "#/components/schemas/DetailedAgentLog"
    Executions:
      description: Executions response
      content:
        application/json:
          schema:
            title: ExecutionsResponse
            type: object
            properties:
              pagination:
                $ref: "#/components/schemas/Pagination"
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Execution"
    DetailedAgentLog:
      description: Agent log response
      content:
        application/json:
          schema:
            title: AgentLogResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/DetailedAgentLog"

    Exchange:
      description: Exchange token response
      content:
        application/json:
          schema:
            title: ExchangeTokenResponse
            type: object
            properties:
              data:
                type: object
                required:
                  - valid
                properties:
                  valid:
                    type: boolean
                    description: Whether the provided token was valid
                    example: true
                  token:
                    type: string
                    description: "The refreshed token, if the provided token was valid"
                  sentTo:
                    type: string
                    description: "The email address the recovery email was sent to, if the provided token was not valid"
                    example: john.doe@example.com
    Success:
      description: Success response
      content:
        application/json:
          schema:
            title: SuccessResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Success"
    RuleResponse:
      description: Rule response
      content:
        application/json:
          schema:
            title: RuleResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/MappingRule"
    RulesResponse:
      description: Rules response
      content:
        application/json:
          schema:
            title: RulesResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/MappingRule"
    ProgramResponse:
      description: Program response
      content:
        application/json:
          schema:
            title: ProgramResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/MappingProgram"
    ProgramsResponse:
      description: Programs response
      content:
        application/json:
          schema:
            title: ProgramsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/MappingProgram"

    SourceDestinationWeightsResponse:
      description: SourceDestinationWeights response
      content:
        application/json:
          schema:
            title: SourceDestinationWeightsResponse
            type: object
            properties:
              data:
                type: object
                properties:
                  weights:
                    type: array
                    items:
                      $ref: "#/components/schemas/SourceDestinationWeight"
    FieldConfigResponse:
      description: Field config response
      content:
        application/json:
          schema:
            title: FieldConfigResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/FieldConfig"
    GeneratedMutationResponse:
      description: Generate mutation response
      x-internal: true
      content:
        application/json:
          schema:
            title: GeneratedMutationResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/GeneratedMutation"
    GeneratedQueryResponse:
      description: Generate query response
      x-internal: true
      content:
        application/json:
          schema:
            title: GeneratedQueryResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/GeneratedQuery"
    Products:
      description: Products response
      content:
        application/json:
          schema:
            title: ProductsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    CreateCheckoutSession:
      description: Create checkout session response
      content:
        application/json:
          schema:
            title: CreateCheckoutSessionResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/CheckoutSession"
    BillingPlanWithUsageResponse:
      description: Billing plan with usage response
      content:
        application/json:
          schema:
            title: BillingPlanWithUsageResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/BillingPlanWithUsage"
    BillingLimitsResponse:
      description: Billing limits response
      content:
        application/json:
          schema:
            title: BillingLimitsResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/BillingLimits"
    BillingSubscriptions:
      description: A list of billing subscriptions
      content:
        application/json:
          schema:
            title: BillingSubscriptionsResponse
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/BillingSubscription"
    BillingSubscription:
      description: A billing subscriptions
      content:
        application/json:
          schema:
            title: BillingSubscriptionResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/BillingSubscription"
    Secrets:
      description: Response body for Secrets
      content:
        application/json:
          schema:
            title: SecretsResponse
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/Secrets"
    AssignRoleResponse:
      description: Response body for AssignRole
      content:
        application/json:
          schema:
            title: AssignRoleResponse
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/RoleActorResource"
    CreateConnectionLinkResponse:
      description: Create connection link response
      content:
        application/json:
          schema:
            title: CreateConnectionLinkResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/ConnectionLink"
    DataRetentionPolicies:
      description: Data retention policies response
      content:
        application/json:
          schema:
            title: DataRetentionPolicies
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/components/schemas/DataRetentionPolicy"

    DataRetentionPolicyResponse:
      description: Data Retention Policy response
      content:
        application/json:
          schema:
            title: DataRetentionPolicyResponse
            type: object
            properties:
              data:
                $ref: "#/components/schemas/DataRetentionPolicy"

  schemas:
    AccountId:
      title: AccountId
      description: Account ID
      type: string
      example: us_acc_uj6s91wc
    UserId:
      title: UserId
      description: User ID
      type: string
      example: us_usr_a7Ws9cue
    GuestId:
      title: GuestId
      description: Guest ID
      type: string
      example: us_g_5ue7P9cU
    EnvironmentId:
      title: EnvironmentId
      description: Environment ID
      type: string
      example: us_env_hVXkXs0b
    DataRetentionPolicyId:
      title: DataRetentionPolicyId
      description: DataRetentionPolicy Id
      type: string
      example: us_drp_qGZbKwDW
    AgentId:
      title: AgentId
      description: Agent ID
      type: string
      example: us_ag_qGZbKwDW
    FileId:
      title: FileId
      description: File ID
      type: string
      example: us_fl_qGZbKwDW
    DocumentId:
      title: DocumentId
      description: Document ID
      type: string
      example: us_dc_KwDW6cfH
    SpaceId:
      title: SpaceId
      description: Space ID
      type: string
      example: us_sp_DrdXetPN
    SpaceConfigId:
      x-internal: true
      deprecated: true
      title: SpaceConfigId
      description: Space Config ID
      type: string
      example: us_sc_uj691wck
    WorkbookId:
      title: WorkbookId
      description: Workbook ID
      type: string
      example: us_wb_qGZbKwDW
    RoleId:
      title: RoleId
      description: Role ID
      type: string
      example: us_rol_qGZbKwDW
    SheetId:
      title: SheetId
      description: Sheet ID
      type: string
      example: us_sh_fHfzjzHb
    SheetSlug:
      title: SheetSlug
      description: Sheet Slug
      type: string
      example: test/mySheet
    SnapshotId:
      title: SnapshotId
      description: Snapshot ID
      type: string
      example: us_ss_4tzVnfHf
    FieldId:
      title: FieldId
      description: Field ID
      type: string
      example: additionalProp1
    CommitId:
      title: CommitId
      description: Commit ID
      type: string
      example: us_vr_jte4tzVn
    VersionId:
      title: VersionId
      description: Deprecated. Use `commitId` instead.
      type: string
      example: us_vr_jte4tzVn
    JobId:
      title: JobId
      description: Pipeline Job ID
      type: string
      example: us_jb_UQg89Drd
    RecordId:
      title: RecordId
      description: Record ID
      type: string
      example: us_rc_a7W9cuesESa7W9cu
    EventId:
      title: EventId
      description: Event ID
      type: string
      example: us_evt_9cuesESa7W9cuesE
    ProgramId:
      title: ProgramId
      description: Mapping Program ID
      type: string
      example: us_mp_jte4tzVn
    BillingSubscriptionId:
      title: BillingSubscriptionId
      description: Billing Subscription ID
      type: string
      example: us_bsb_UQg89Drd
    SecretId:
      title: SecretId
      description: Secret ID
      type: string
      example: us_sec_9cuesESa7W9cuesE
    Success:
      title: Success
      description: Informs whether or not a request was successful
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
    Pagination:
      title: Pagination
      description: pagination info
      type: object
      required:
        - currentPage
        - pageCount
        - totalCount
      properties:
        currentPage:
          type: number
          description: current page of results
        pageCount:
          type: number
          description: total number of pages of results
        totalCount:
          type: number
          description: total available results
    Validation:
      title: Validation
      description: Validation response on input sanitation of user input
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        errors:
          type: array
          items:
            type: string
    Account:
      title: Account
      description: Account
      type: object
      required:
        - id
        - name
        - createdAt
      properties:
        id:
          $ref: "#/components/schemas/AccountId"
        name:
          type: string
          description: Account name
          example: My Account
        createdAt:
          type: string
          format: date-time
          description: Account creation date
          example: 2020-01-01T00:00:00.000Z
        subdomain:
          type: string
        vanityDomainDashboard:
          type: string
        vanityDomainSpaces:
          type: string
        embeddedDomainWhitelist:
          type: array
          items:
            type: string
        customFromEmail:
          type: string
        stripeCustomerId:
          type: string
    ActionName:
      title: ActionName
      description: Name of an action
      type: string
      example: download
    ApiCredentials:
      title: Api Credentials
      description: Client ID and secret used to retrieve an access token
      type: object
      required:
        - clientId
        - secret
      properties:
        clientId:
          type: string
          description: Client ID
          example: 3ceda940-43b6-4369-ad67-1df8ef328bd6
        secret:
          type: string
          description: Secret
          example: d89b0719-b379-4247-a7f0-a3202dd28274
    UserCredentials:
      title: User Credentials
      description: Email and password used to retrieve an access token
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email
          example: flatfile@example.com
        password:
          type: string
          description: Password
          example: Sw0rdf1sh
    AccessToken:
      title: AccessToken
      description: Properties used to allow users to request our private services
      type: object
      required:
        - accessToken
        - expiresIn
        - expires
      properties:
        accessToken:
          type: string
          example: AYjcyMzY3ZDhiNmJkNTY
        expiresIn:
          type: string
          example: "86400"
        expires:
          type: string
          example: "2022-09-18T00:19:57.007Z"
        email:
          type: string
          example: flatfile@example.com
        userId:
          $ref: "#/components/schemas/UserId"
        accountId:
          $ref: "#/components/schemas/AccountId"
    EventToken:
      title: EventToken
      description: Properties used to allow users to connect to the event bus
      type: object
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        subscribeKey:
          type: string
          description: The id of the event bus to subscribe to
          example: sub-c-a0be4bbc-3767-494e-9202-bc4862b03ef0
        ttl:
          type: number
          description: Time to live in minutes
          example: 15
        token:
          type: string
          example: p0AkFl043rhDdHRsple3KgQ3NwY6BDcENnctokenVzcqBDczaWdYIGOAeTyWGJI
    ApiToken:
      title: ApiToken
      description: Client id and secret used for authenticating against our APIs
      type: object
      required:
        - clientId
        - description
        - metadata
        - createdAt
      properties:
        clientId:
          type: string
        description:
          type: string
        metadata:
          type: object
        createdAt:
          type: string
          example: "2022-09-18T00:19:57.007Z"
        secret:
          type: string
    ApiKey:
      title: ApiKey
      description: API Key used for authenticating against our APIs
      type: object
      required:
        - id
        - type
        - createdAt
        - operations
      properties:
        id:
          type: string
        rawKey:
          type: string
        type:
          type: string
          enum:
            - PUBLISHABLE
            - SECRET
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        accountId:
          $ref: "#/components/schemas/AccountId"
        operations:
          type: array
          items:
            type: object
            required:
              - path
              - method
            properties:
              path:
                type: string
              method:
                type: string
        createdAt:
          type: string
          format: date-time
          example: "2022-09-18T00:19:57.007Z"
        updatedAt:
          type: string
          format: date-time
          example: "2022-09-18T00:19:57.007Z"
        deletedAt:
          type: string
          format: date-time
          example: "2022-09-18T00:19:57.007Z"
    # Users
    User:
      title: User
      description: User object
      type: object
      allOf:
        - $ref: "#/components/schemas/UserConfig"
      required:
        - id
      properties:
        id:
          $ref: "#/components/schemas/UserId"
    UserConfig:
      title: UserConfig
      description: Properties used to create a new user
      type: object
      required:
        - email
        - name
        - accountId
      properties:
        email:
          type: string
          example: flatfile@example.com
        name:
          type: string
          example: Mr. Flatfile
        accountId:
          $ref: "#/components/schemas/AccountId"
    Guest:
      title: Guest
      description: Guest object
      type: object
      allOf:
        - $ref: "#/components/schemas/GuestConfig"
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/GuestId"
        createdAt:
          description: Date the guest object was created
          example: 2022-09-11T18:04:35.979Z
          type: string
          format: date-time
        updatedAt:
          description: Date the guest object was last updated
          example: 2022-09-11T18:04:35.979Z
          type: string
          format: date-time
    GuestConfig:
      title: GuestConfig
      description: Properties used to create a new guest
      type: object
      required:
        - environmentId
        - email
        - name
        - spaces
      properties:
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        email:
          type: string
          example: guest@example.com
        name:
          type: string
          example: Mr. Guest
        spaces:
          type: array
          items:
            type: object
            required:
              - id
            properties:
              id:
                $ref: "#/components/schemas/SpaceId"
              workbooks:
                type: array
                items:
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      $ref: "#/components/schemas/WorkbookId"
              lastAccessed:
                type: string
                format: date-time
                example: "2022-09-18T00:19:57.007Z"
          minItems: 1
    GuestConfigUpdate:
      title: GuestConfigUpdate
      description: Properties used to update an existing guest
      type: object
      properties:
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        email:
          type: string
          example: guest@example.com
        name:
          type: string
          example: Mr. Guest
        spaces:
          type: array
          items:
            type: object
            required:
              - id
            properties:
              id:
                $ref: "#/components/schemas/SpaceId"
              workbooks:
                type: array
                items:
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      $ref: "#/components/schemas/WorkbookId"
              lastAccessed:
                type: string
                format: date-time
                example: "2022-09-18T00:19:57.007Z"
    FronteggSignup:
      title: FronteggSignup
      description: Properties on the signup object sent from Frontegg
      type: object
      required:
        - user
      properties:
        user:
          $ref: "#/components/schemas/FronteggUser"
    FronteggUser:
      title: FronteggUser
      description: Properties on a Frontegg user object
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: user's email
        name:
          type: string
          description: user's name
        tenantId:
          type: string
          description: Frontegg tenant id
    Environment:
      title: Environment
      description: The base object that holds all spaces
      type: object
      required:
        - id
        - name
        - isProd
        - accountId
        - features
        - guestAuthentication
        - metadata
      allOf:
        - $ref: "#/components/schemas/EnvironmentConfig"
      properties:
        id:
          $ref: "#/components/schemas/EnvironmentId"
        accountId:
          $ref: "#/components/schemas/AccountId"
        features:
          type: object
        metadata:
          type: object
    GuestAuthenticationEnum:
      type: string
      description: The type of authentication to use for guests
      enum:
        - shared_link
        - magic_link
      example: magic_link
    EnvironmentConfig:
      title: EnvironmentConfig
      description: Properties used to create and update environments
      type: object
      properties:
        name:
          type: string
          description: The name of the environment
          example: dev
        isProd:
          type: boolean
          description: Whether or not the environment is a production environment
          example: false
        guestAuthentication:
          type: array
          items:
            $ref: "#/components/schemas/GuestAuthenticationEnum"
        metadata:
          type: object
          example: {}
        translationsPath:
          type: string
        namespaces:
          type: array
          items:
            type: string
        languageOverride:
          type: string
        dataRetentionPolicy:
          type: string
          enum:
            - lastActivity
            - sinceCreated
    Document:
      title: Document
      description: A document (markdown components) belong to a space
      type: object
      allOf:
        - $ref: "#/components/schemas/DocumentConfig"
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/DocumentId"
        spaceId:
          $ref: "#/components/schemas/SpaceId"
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        createdAt:
          type: string
          format: date-time
          description: Date when document was created
          example: "2022-09-11T18:04:35.979Z"
        updatedAt:
          type: string
          format: date-time
          description: Date when document was updated
          example: "2022-09-11T18:04:35.979Z"
    DocumentConfig:
      title: DocumentConfig
      description: Properties used to create a new document
      type: object
      required:
        - title
        - body
      properties:
        title:
          type: string
          example: Getting Started
        body:
          type: string
          example: This is a markdown body
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
        treatments:
          type: array
          items:
            type: string
    ExportOptions:
      title: Export Options
      type: object
      properties:
        commitId:
          $ref: "#/components/schemas/CommitId"
        versionId:
          $ref: "#/components/schemas/VersionId"
        sortField:
          $ref: "#/components/schemas/SortField"
        sortDirection:
          $ref: "#/components/schemas/SortDirection"
        filter:
          $ref: "#/components/schemas/Filter"
        filterField:
          $ref: "#/components/schemas/FilterField"
        searchValue:
          $ref: "#/components/schemas/SearchValue"
        searchField:
          $ref: "#/components/schemas/SearchField"
        q:
          type: string
          description: a FFQL query to filter records by
        ids:
          description: The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
          type: array
          items:
            $ref: "#/components/schemas/RecordId"

    Value:
      title: Value
      anyOf:
        - type: string
          nullable: true
        - type: boolean
          nullable: true
        - type: number
          nullable: true

    Activity:
      title: Activity
      description: An activity is an audit record of an action in the Flatfile system
      type: object
      properties:
        activity:
          $ref: "#/components/schemas/EventTopic"
        resourceId:
          type: string
        resourceType:
          type: string
        resourceSlug:
          type: string
        resourceName:
          type: string
        actorId:
          type: string
        actorType:
          type: string
        actorName:
          type: string
        context:
          type: object
          description: The context of the event
          required:
            - accountId
            - environmentId
          properties:
            namespaces:
              type: array
              description: The namespaces of the event
              items:
                type: string
                example: "default"
            slugs:
              type: object
              description: The slugs of related resources
              properties:
                space:
                  type: string
                  description: The slug of the space
                  example: "my-space"
                workbook:
                  type: string
                  description: The slug of the workbook
                  example: "my-workbook"
                sheet:
                  type: string
                  description: The slug of the sheet
                  example: "my-sheet"
            actionName:
              $ref: "#/components/schemas/ActionName"
            accountId:
              $ref: "#/components/schemas/AccountId"
            environmentId:
              $ref: "#/components/schemas/EnvironmentId"
            spaceId:
              $ref: "#/components/schemas/SpaceId"
            workbookId:
              $ref: "#/components/schemas/WorkbookId"
            sheetId:
              $ref: "#/components/schemas/SheetId"
            sheetSlug:
              $ref: "#/components/schemas/SheetSlug"
            snapshotId:
              $ref: "#/components/schemas/SnapshotId"
            versionId:
              $ref: "#/components/schemas/VersionId"
            commitId:
              $ref: "#/components/schemas/CommitId"
            jobId:
              $ref: "#/components/schemas/JobId"
            programId:
              $ref: "#/components/schemas/ProgramId"
            fileId:
              $ref: "#/components/schemas/FileId"
            documentId:
              $ref: "#/components/schemas/DocumentId"
            precedingEventId:
              $ref: "#/components/schemas/EventId"
            actorId:
              $ref: "#/components/schemas/ActorId"
        payload:
          description: Payload of the event
          type: object
          additionalProperties: true
        activityTime:
          description: Date the activity occurred
          type: string
          format: date-time

    Space:
      title: Space
      description: A place to store your workbooks
      type: object
      allOf:
        - $ref: "#/components/schemas/SpaceConfig"
      required:
        - id
        - environmentId
        - createdAt
        - updatedAt
        - name
        - display_order
        - guestAuthentication
      properties:
        id:
          $ref: "#/components/schemas/SpaceId"
        workbooksCount:
          type: integer
          description: Amount of workbooks in the space
          example: 0
        filesCount:
          type: integer
          description: Number of files in the space
          example: 0
        createdByUserId:
          $ref: "#/components/schemas/UserId"
        createdByUserName:
          type: string
          description: User name who created space
          example: Mr. Flatfile
        createdAt:
          type: string
          format: date-time
          description: Date when space was created
          example: "2022-09-11T18:04:35.979Z"
        updatedAt:
          description: Date when space was updated
          format: date-time
          type: string
        archivedAt:
          format: date-time
          type: string
          description: Date when space was archived
          example: "2022-09-11T18:04:35.979Z"
        expiredAt:
          format: date-time
          type: string
          description: Date when space was expired
          example: "2022-09-11T18:04:35.979Z"
        lastActivityAt:
          format: date
          type: string
          description: Date that the last activity in the space occurred. This could include any create or update activity in the space like adding a record to a sheet, uploading a new file, or updating the configuration of a workbook.
          example: "2022-09-11"
        guestLink:
          type: string
          description: Guest link to the space
          example: "https://app.flatfile.io/space/1234?token=5678"
        accessToken:
          type: string
        isCollaborative:
          type: boolean
        size:
          $ref: "#/components/schemas/SpaceSize"
        upgradedAt:
          type: string
          format: date-time
    SpaceSize:
      title: SpaceSize
      description: The size of a space
      type: object
      required:
        - name
        - id
        - numUsers
        - pdv
        - numFiles
      properties:
        name:
          type: string
        id:
          type: string
        numUsers:
          type: integer
        pdv:
          type: number
        numFiles:
          type: integer
    GetSpacesSortField:
      type: string
      enum:
        - name
        - workbooksCount
        - filesCount
        - environmentId
        - createdByUserName
        - createdAt
    GetSpaceActivitySortField:
      type: string
      enum:
        - activity
        - created_at

    FileMode:
      type: string
      default: import
      enum:
        - import
        - export
    SpaceConfig:
      title: SpaceConfig
      description: Properties used to create and update a Space
      type: object
      properties:
        spaceConfigId:
          $ref: "#/components/schemas/SpaceConfigId"
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        primaryWorkbookId:
          $ref: "#/components/schemas/WorkbookId"
        name:
          type: string
          description: The name of the space
          example: My Space
        displayOrder:
          type: integer
          description: The display order
          example: 1
        metadata:
          type: object
          description: Metadata for the space
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
        guestAuthentication:
          type: array
          items:
            $ref: "#/components/schemas/GuestAuthenticationEnum"
        access:
          type: array
          items:
            $ref: "#/components/schemas/SpaceAccess"
        autoConfigure:
          type: boolean
          description: Starts custom job on space creation if true
          default: false
        namespace:
          type: string
        labels:
          type: array
          items:
            type: string
        translationsPath:
          type: string
        languageOverride:
          type: string
        archivedAt:
          type: string
          format: date-time
          nullable: true
    SpacePattern:
      title: SpacePattern
      description: Properties used to create a new Space Config
      type: object
      allOf:
        - $ref: "#/components/schemas/SpacePatternConfig"
      required:
        - id
      properties:
        id:
          $ref: "#/components/schemas/SpaceConfigId"
    SpacePatternConfig:
      title: SpaceConfigPattern
      description: Properties used to create a new Space Config
      type: object
      required:
        - slug
        - name
        - blueprints
      properties:
        slug:
          type: string
          example: persistent-slug
        name:
          type: string
          example: Editable Name
        blueprints:
          type: array
          items:
            $ref: "#/components/schemas/Blueprint"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
    UpgradeSpaceConfig:
      title: UpgradeSpaceConfig
      x-internal: true
      description: Properties used to upgrade a space
      type: object
      required:
        - id
      properties:
        id:
          type: string
    Blueprint:
      title: Blueprint
      description: Properties used to create a new Blueprint
      type: object
      required:
        - slug
        - name
        - sheets
      properties:
        slug:
          type: string
          example: persistent-slug
        name:
          type: string
          example: Blueprint name
        primary:
          type: boolean
          default: false
        sheets:
          type: array
          items:
            $ref: "#/components/schemas/SheetConfig"
    Secrets:
      title: Secrets
      description: List of Secrets
      type: array
      items:
        $ref: "#/components/schemas/Secret"
    Secret:
      title: Secret
      description: the value of a secret
      type: object
      required:
        - id
        - name
        - value
        - environmentId
      properties:
        id: # the id
          $ref: "#/components/schemas/SecretId"
        name:
          $ref: "#/components/schemas/SecretsName"
        value:
          $ref: "#/components/schemas/SecretsValue"
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        spaceId:
          $ref: "#/components/schemas/SpaceId"
    WriteSecret:
      title: WriteSecret
      description: Object for writing a secret
      type: object
      properties:
        name:
          $ref: "#/components/schemas/SecretsName"
        value:
          $ref: "#/components/schemas/SecretsValue"
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        spaceId:
          $ref: "#/components/schemas/SpaceId"
      required:
        - environmentId
        - name
        - value
    ActorResource:
      title: ActorResource
      description: A tuple that contains an ActorId and ResourceId
      type: object
      required:
        - actorId
        - resourceId
      properties:
        actorId:
          $ref: "#/components/schemas/ActorId"
        resourceId:
          $ref: "#/components/schemas/ResourceId"
    ActorId:
      anyOf:
        - $ref: "#/components/schemas/UserId"
        - $ref: "#/components/schemas/GuestId"
        - $ref: "#/components/schemas/AgentId"
    ResourceId:
      anyOf:
        - $ref: "#/components/schemas/AccountId"
        - $ref: "#/components/schemas/EnvironmentId"
        - $ref: "#/components/schemas/SpaceId"
    RoleActorResource:
      title: RoleActorResource
      description: A RoleId, ActorId, and ResourceId that exactly define a role assignment
      allOf:
        - $ref: "#/components/schemas/ActorResource"
        - type: object
          required:
            - roleId
          properties:
            roleId:
              $ref: "#/components/schemas/RoleId"
    SecretsName:
      title: Secrets Name
      description: the name of a secret
      type: string
      minLength: 1
      maxLength: 1024
      example: SOMESERVICE_APIKEY
    SecretsValue:
      title: Secrets Value
      description: the value of a secret
      type: string
      minLength: 1
      maxLength: 1024
      format: password
      example: Sup3r$ecret\/alue!

    SidebarConfig:
      oneOf:
        - $ref: "#/components/schemas/WorkbookSidebarConfig"
        - $ref: "#/components/schemas/DocumentSidebarConfig"
        - $ref: "#/components/schemas/LinkSidebarConfig"
      discriminator:
        propertyName: type
        mapping:
          workbook: "#/components/schemas/WorkbookSidebarConfig"
          document: "#/components/schemas/DocumentSidebarConfig"
          link: "#/components/schemas/LinkSidebarConfig"
    BaseSideBarConfig:
      type: object
      properties:
        type:
          type: string
          default: string
          enum:
            - workbook
            - document
            - link
    WorkbookSidebarConfig:
      allOf:
        - $ref: "#/components/schemas/BaseSideBarConfig"
        - type: object
          required:
            - workbookId
          properties:
            workbookId:
              $ref: "#/components/schemas/WorkbookId"
    DocumentSidebarConfig:
      allOf:
        - $ref: "#/components/schemas/BaseSideBarConfig"
        - type: object
          required:
            - documentId
          properties:
            documentId:
              $ref: "#/components/schemas/DocumentId"
    LinkSidebarConfig:
      allOf:
        - $ref: "#/components/schemas/BaseSideBarConfig"
        - type: object
          required:
            - href
            - title
          properties:
            href:
              type: string
              description: http url of the link
            title:
              type: string
              description: Space the file should be uploaded to
    FileConfig:
      title: FileConfig
      description: Properties used to update a file
      type: object
      properties:
        workbookId:
          $ref: "#/components/schemas/WorkbookId"
        mode:
          $ref: "#/components/schemas/FileMode"
        status:
          $ref: "#/components/schemas/ModelFileStatusEnum"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
        name:
          type: string
          description: The name of the file
          example: file.csv
      additionalProperties: false
    File:
      title: File
      description: Any uploaded file of any type
      type: object
      required:
        - id
        - name
        - ext
        - mimetype
        - encoding
        - status
        - size
        - bytesReceived
        - spaceId
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/FileId"
        name:
          description: Original filename
          example: foobar.csv
          type: string
        ext:
          description: Extension of the file
          example: csv
          type: string
        mimetype:
          description: MIME Type of the file
          example: text/csv
          type: string
        encoding:
          description: Text encoding of the file
          example: ascii
          type: string
        status:
          $ref: "#/components/schemas/ModelFileStatusEnum"
        mode:
          $ref: "#/components/schemas/FileMode"
        size:
          description: Size of file in bytes
          example: 1452
          type: integer
        bytesReceived:
          description: Number of bytes that have been uploaded so far (useful for progress tracking)
          example: 702
          type: integer
        spaceId:
          $ref: "#/components/schemas/SpaceId"
        workbookId:
          $ref: "#/components/schemas/WorkbookId"
        createdAt:
          description: Date the file was created
          example: "2022-09-11T18:04:35.979Z"
          type: string
          format: date-time
        updatedAt:
          description: Date the file was last updated
          example: "2022-09-11T18:04:35.979Z"
          type: string
          format: date-time
        expiredAt:
          format: date-time
          type: string
          description: Date when file was expired
          example: "2022-09-11T18:04:35.979Z"
        sheetId:
          $ref: "#/components/schemas/SheetId"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
    ModelFileStatusEnum:
      description: Status of the file
      example: complete
      type: string
      enum:
        - partial
        - complete
        - archived
        - purged
        - failed
    # Events
    EventConfig:
      title: EventConfig
      description: Properties used to create a new event
      type: object
      required:
        - domain
        - topic
        - context
        - payload
      properties:
        domain:
          type: string
          description: The domain of the event
          enum:
            - file
            - space
            - workbook
            - job
            - document
            - sheet
            - program
            - secret
        topic:
          $ref: "#/components/schemas/EventTopic"
        namespaces:
          type: array
          items:
            type: string
            example: "default"
        context:
          type: object
          description: The context of the event
          required:
            - accountId
            - environmentId
          properties:
            namespaces:
              type: array
              description: The namespaces of the event
              items:
                type: string
                example: "default"
            slugs:
              type: object
              description: The slugs of related resources
              properties:
                space:
                  type: string
                  description: The slug of the space
                  example: "my-space"
                workbook:
                  type: string
                  description: The slug of the workbook
                  example: "my-workbook"
                sheet:
                  type: string
                  description: The slug of the sheet
                  example: "my-sheet"
            actionName:
              $ref: "#/components/schemas/ActionName"
            accountId:
              $ref: "#/components/schemas/AccountId"
            environmentId:
              $ref: "#/components/schemas/EnvironmentId"
            spaceId:
              $ref: "#/components/schemas/SpaceId"
            workbookId:
              $ref: "#/components/schemas/WorkbookId"
            sheetId:
              $ref: "#/components/schemas/SheetId"
            sheetSlug:
              $ref: "#/components/schemas/SheetSlug"
            snapshotId:
              $ref: "#/components/schemas/SnapshotId"
            versionId:
              $ref: "#/components/schemas/VersionId"
            commitId:
              $ref: "#/components/schemas/CommitId"
            jobId:
              $ref: "#/components/schemas/JobId"
            programId:
              $ref: "#/components/schemas/ProgramId"
            fileId:
              $ref: "#/components/schemas/FileId"
            documentId:
              $ref: "#/components/schemas/DocumentId"
            precedingEventId:
              $ref: "#/components/schemas/EventId"
            actorId:
              $ref: "#/components/schemas/ActorId"
        attributes:
          type: object
          description: The attributes of the event
          properties:
            targetUpdatedAt:
              description: Date the related entity was last updated
              type: string
              format: date-time
            progress:
              type: object
              description: The progress of the event within a collection of iterable events
              properties:
                current:
                  type: integer
                  description: The current progress of the event
                  example: 3
                total:
                  type: integer
                  description: The total number of events in this group
                  example: 5
                percent:
                  type: integer
                  description: The percent complete of the event group
                  example: 60
        payload:
          description: Payload of the event
          type: object
          additionalProperties: true
          example:
            recordsAdded: 100
        callbackUrl:
          type: string
          description: The callback url to acknowledge the event
          example: "https://api.us.flatfile.com/v1/events/us_ev_9cuesESa7W9cuesESa7W9cuesES/ack"
        dataUrl:
          type: string
          description: The url to retrieve the data associated with the event
          example: "https://api.us.flatfile.com/v1/records?for=us_ev_9cuesESa7W9cuesESa7W9cuesES"
        createdAt:
          description: Date the event was created
          type: string
          format: date-time
        deletedAt:
          description: Date the event was deleted
          type: string
          format: date-time
        acknowledgedAt:
          description: Date the event was last acknowledged
          type: string
          format: date-time
          nullable: true
        acknowledgedBy:
          description: The actor (user or system) who acknowledged the event
          type: string
          example: us_usr_a7Ws9cue
        target:
          type: string
          deprecated: true
          x-internal: true
          example: sheet(TestSheet)
        origin:
          type: object
          description: Information on the resource that created the event
          properties:
            id:
              type: string
            slug:
              type: string
    Event:
      title: Event
      description: An event that tracks an activity within an environment
      type: object
      allOf:
        - $ref: "#/components/schemas/EventConfig"
      required:
        - id
        - createdAt
      properties:
        id:
          $ref: "#/components/schemas/EventId"
        createdAt:
          type: string
          format: date-time
          example: 2022-09-11T18:04:35.979Z
          description: Date the event was created
    Action:
      $ref: ./packages/blueprint/properties.yaml#/components/schemas/Action
    EventTopic:
      type: string
      description: The topic of the event
      enum:
        # Emitted by /agents
        - "agent:created"
        - "agent:updated"
        - "agent:deleted"

        # Emitted by /spaces
        - "space:created"
        - "space:updated"
        - "space:deleted"
        - "space:archived"
        - "space:expired"
        - "space:guestAdded"
        - "space:guestRemoved"

        # Emitted by /spaces/documents
        - "document:created"
        - "document:updated"
        - "document:deleted"

        # Emitted by /workbooks
        - "workbook:created"
        - "workbook:updated"
        - "workbook:deleted"
        - "workbook:expired"

        # Emitted by /sheets
        - "sheet:created"
        - "sheet:updated"
        - "sheet:deleted"
        - "snapshot:created"

        # Emitted by /records
        - "records:created"
        - "records:updated"
        - "records:deleted"

        # Emitted by /files
        - "file:created"
        - "file:updated"
        - "file:deleted"
        - "file:expired"

        # Emitted by /jobs
        - "job:created"
        - "job:updated"
        - "job:deleted"
        - "job:ready"
        - "job:scheduled"
        - "job:completed"
        - "job:failed"
        - "job:outcome-acknowledged"
        - "job:parts-completed"

        # Emitted by /mapping
        - "program:created"
        - "program:updated"

        # Emitted by /versions (will be renamed to commits)
        - "commit:created"
        - "commit:updated"
        - "commit:completed"
        - "layer:created"

        # Emitted by /secrets
        - "secret:created"
        - "secret:updated"
        - "secret:deleted"

    AuditActivity:
      type: string
      description: The topic of the event
      enum:
        # Emitted by /agents
        - "agent:created"
        - "agent:updated"
        - "agent:deleted"

        # Emitted by /spaces
        - "space:created"
        - "space:updated"
        - "space:deleted"
        - "space:archived"
        - "space:expired"
        - "space:guestAdded"
        - "space:guestRemoved"

        # Emitted by /spaces/documents
        - "document:created"
        - "document:updated"
        - "document:deleted"

        # Emitted by /workbooks
        - "workbook:created"
        - "workbook:updated"
        - "workbook:deleted"
        - "workbook:expired"

        # Emitted by /sheets
        - "sheet:created"
        - "sheet:updated"
        - "sheet:deleted"
        - "snapshot:created"

        # Emitted by /files
        - "file:created"
        - "file:deleted"
        - "file:expired"

        # Emitted by /jobs
        - "job:created"
        - "job:deleted"
        - "job:ready"
        - "job:scheduled"
        - "job:completed"
        - "job:failed"
        - "job:outcome-acknowledged"
        - "job:parts-completed"

        # Emitted by /mapping
        - "program:created"
        - "program:updated"

        # Emitted by /versions (will be renamed to commits)
        - "commit:created"
        - "commit:updated"
        - "commit:completed"
        - "layer:created"

        # Emitted by /secrets
        - "secret:created"
        - "secret:updated"
        - "secret:deleted"
    Agent:
      title: Agent
      description: An agent that can listen for events and execute actions
      type: object
      allOf:
        - $ref: "#/components/schemas/AgentConfig"
      required:
        - id
      properties:
        id:
          $ref: "#/components/schemas/AgentId"
    AgentConfig:
      title: AgentConfig
      description: Properties used to create a new agent
      type: object
      properties:
        topics:
          type: array
          description: The topics the agent should listen for
          items:
            $ref: "#/components/schemas/EventTopic"
        compiler:
          type: string
          description: The compiler of the agent
          enum:
            - js
        source:
          type: string
          description: The source of the agent
          example: "module.exports = { routeEvent: async (...args) => { console.log(args) } }"
    AgentLog:
      title: AgentLog
      description: A log of an agent execution
      type: object
      required:
        - eventId
        - createdAt
        - completedAt
        - success
      properties:
        eventId:
          $ref: "#/components/schemas/EventId"
        success:
          type: boolean
          description: Whether the agent execution was successful
          example: true
        createdAt:
          type: string
          example: "2022-09-18T00:19:57.007Z"
        completedAt:
          type: string
          example: "2022-09-18T00:20:04.007Z"
        log:
          type: string
          description: The log of the agent execution
          example: SUCCESS
    DetailedAgentLog:
      title: AgentLog
      description: A log of an agent execution
      type: object
      required:
        - eventId
        - createdAt
        - completedAt
        - success
      properties:
        eventId:
          $ref: "#/components/schemas/EventId"
        success:
          type: boolean
          description: Whether the agent execution was successful
          example: true
        createdAt:
          type: string
          example: "2022-09-18T00:19:57.007Z"
        completedAt:
          type: string
          example: "2022-09-18T00:20:04.007Z"
        duration:
          type: number
          example: 500
        topic:
          type: string
          example: space:created
        context:
          type: object
          example: {}
        log:
          type: string
          description: The log of the agent execution
          example: SUCCESS
    Execution:
      title: Execution
      description: An agent execution
      type: object
      required:
        - eventId
        - createdAt
        - completedAt
        - success
      properties:
        eventId:
          $ref: "#/components/schemas/EventId"
        success:
          type: boolean
          description: Whether the agent execution was successful
          example: true
        createdAt:
          type: string
          example: "2022-09-18T00:19:57.007Z"
        completedAt:
          type: string
          example: "2022-09-18T00:20:04.007Z"
        duration:
          type: number
          example: 500
        topic:
          type: string
          example: space:created

    Job:
      title: Job
      description: A single unit of work that will execute asynchronously
      type: object
      allOf:
        - $ref: "#/components/schemas/JobConfig"
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/JobId"
        createdAt:
          description: Date the item was created
          example: 2022-09-11T18:04:35.979Z
          type: string
          format: date-time
        updatedAt:
          description: Date the item was last updated
          example: 2022-09-11T18:04:35.979Z
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
          description: the time that the job started at
          nullable: true
        finishedAt:
          type: string
          format: date-time
          description: the time that the job finished at
          nullable: true
        estimatedCompletionAt:
          type: string
          format: date-time
          description: the estimated time that the job will finish at
          nullable: true
        outcomeAcknowledgedAt:
          type: string
          format: date-time
          description: the time that the job's outcome has been acknowledged by a user
          nullable: true
    JobUpdate:
      title: JobUpdate
      description: A single unit of work that will be executed
      type: object
      properties:
        config:
          oneOf:
            - $ref: "#/components/schemas/DeleteRecordsJobConfig"
            - $ref: "#/components/schemas/FileJobConfig"
            - $ref: "#/components/schemas/PipelineJobConfig"
            - $ref: "#/components/schemas/ExportJobConfig"
            - $ref: "#/components/schemas/MutateJobConfig"
            - $ref: "#/components/schemas/FindAndReplaceJobConfig"
            - $ref: "#/components/schemas/MappingProgramJobConfig"
        status:
          type: string
          description: the status of the job
          enum:
            - created
            - planning
            - ready
            - executing
            - complete
            - failed
          example: complete
        progress:
          type: number
          description: the progress of the job
          example: 100
        outcomeAcknowledgedAt:
          type: string
          format: date-time
          description: the time that the job's outcome has been acknowledged by a user
          nullable: true

    JobConfig:
      title: JobConfig
      description: A single unit of work that a pipeline will execute
      type: object
      required:
        - type
        - source
        - operation
      properties:
        type:
          type: string
          description: The type of job
          enum:
            - file
            - workbook
            - sheet
            - space
            - document
        fromAction:
          $ref: "#/components/schemas/Action"
        operation:
          type: string
          description: The operation to perform on the data. This can be anything as long as a correlating listener is handling it.
          example: "export"
        source:
          $ref: "#/components/schemas/JobSource"
        destination:
          $ref: "#/components/schemas/JobDestination"
        input:
          description: Input parameters for this job type.
          type: object
        subject:
          $ref: "#/components/schemas/JobSubject"
        outcome:
          $ref: "#/components/schemas/JobOutcome"
        info:
          description: Current status of job in text
          type: string
        managed:
          description: Indicates if Flatfile is managing the control flow of this job or if it is being manually tracked.
          type: boolean
          default: true
        config:
          deprecated: true
          x-internal: true
          oneOf:
            - $ref: "#/components/schemas/DeleteRecordsJobConfig"
            - $ref: "#/components/schemas/FileJobConfig"
            - $ref: "#/components/schemas/PipelineJobConfig"
            - $ref: "#/components/schemas/ExportJobConfig"
            - $ref: "#/components/schemas/MutateJobConfig"
            - $ref: "#/components/schemas/FindAndReplaceJobConfig"
            - $ref: "#/components/schemas/MappingProgramJobConfig"
        trigger:
          type: string
          description: the type of trigger to use for this job
          enum:
            - manual
            - immediate
        status:
          type: string
          description: the status of the job
          enum:
            - created
            - planning
            - scheduled
            - ready
            - executing
            - complete
            - failed
            - canceled
          example: complete
        mode:
          type: string
          description: whether the job should run in foreground or background
          default: background
          enum:
            - foreground
            - background
            - toolbarBlocking
          example: background
        progress:
          type: number
          description: the progress of the job between 0 and 100
          example: 100
        parentId:
          $ref: "#/components/schemas/JobId"
        fileId:
          $ref: "#/components/schemas/FileId"
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        part:
          type: number
        partData:
          type: object
        partExecution:
          type: string
          enum:
            - sequential
            - parallel
    JobSource:
      title: JobSource
      description: The id of a file, workbook, or sheet
      type: string
    JobDestination:
      $ref: "#/components/schemas/WorkbookId"
    JobAckDetails:
      title: JobAckDetails
      description: Information related to the acknowledged job
      type: object
      properties:
        info:
          type: string
          description: Information about the Job acknowledgement
        progress:
          type: number
          description: The progress percentage of the job
          example: 3
        estimatedCompletionAt:
          type: string
          format: date-time
          description: The estimated time that the job will complete
          example: "2022-09-11T18:04:35.979Z"
    JobSplitDetails:
      title: JobSplitDetails
      description: Information related to the split job
      type: object
      required:
        - parts
      properties:
        runInParallel:
          type: boolean
          description: Whether the job parts should run in parallel
          example: true
        parts:
          description: The number of parts the job will be split into, or an array of objects with data for each part.
          anyOf:
            - type: array
              items:
                type: object
            - type: number
    JobCompleteDetails:
      title: JobCompleteDetails
      description: Details of a job complete or fail message.
      type: object
      properties:
        outcome:
          $ref: "#/components/schemas/JobOutcome"
        info:
          type: string
          description: Information about the Job outcome
    JobOutcome:
      description: Outcome summary of job.
      type: object
      properties:
        heading:
          type: string
          description: The heading of the outcome
        acknowledge:
          type: boolean
          description: Whether the outcome needs to be acknowledged by a user
        message:
          type: string
          description: The message of the outcome
        buttonText:
          type: string
          description: The text of the button to acknowledge the outcome
        next:
          $ref: "#/components/schemas/JobOutcomeNext"
    JobOutcomeNext:
      description: The next action the user can take after the job completes
      oneOf:
        - $ref: "#/components/schemas/JobOutcomeNextId"
        - $ref: "#/components/schemas/JobOutcomeNextUrl"
        - $ref: "#/components/schemas/JobOutcomeNextDownload"
        - $ref: "#/components/schemas/JobOutcomeNextWait"
        - $ref: "#/components/schemas/JobOutcomeNextSnapshot"
        - $ref: "#/components/schemas/JobOutcomeNextRetry"
    JobOutcomeNextId:
      title: JobOutcomeNextId
      type: object
      required:
        - id
        - type
      properties:
        type:
          enum:
            - id
        id:
          type: string
        label:
          type: string
        path:
          type: string
        query:
          type: string
    JobOutcomeNextUrl:
      title: JobOutcomeNextUrl
      type: object
      required:
        - url
        - type
      properties:
        type:
          enum:
            - url
        url:
          type: string
        label:
          type: string
    JobOutcomeNextDownload:
      title: JobOutcomeNextDownload
      type: object
      required:
        - url
        - type
      properties:
        type:
          enum:
            - download
        url:
          type: string
        label:
          type: string
        fileName:
          type: string
    JobOutcomeNextWait:
      title: JobOutcomeNextWait
      type: object
      required:
        - type
      properties:
        type:
          enum:
            - wait
    JobOutcomeNextSnapshot:
      title: JobOutcomeNextSnapshot
      type: object
      required:
        - type
        - snapshotId
        - sheetId
      properties:
        type:
          enum:
            - snapshot
        snapshotId:
          type: string
        sheetId:
          type: string

    JobOutcomeNextRetry:
      title: JobOutcomeNextRetry
      type: object
      required:
        - type
      properties:
        type:
          enum:
            - retry
        label:
          type: string

    JobCancelDetails:
      title: JobCancelDetails
      description: Info sent when cancelling a job.
      type: object
      properties:
        info:
          type: string
          description: Information about the Job outcome

    JobSubject:
      title: JobSubject
      description: Subject parameters for this job type.
      oneOf:
        - $ref: "#/components/schemas/CollectionJobSubject"
        - $ref: "#/components/schemas/ResourceJobSubject"
      discriminator:
        propertyName: type
        mapping:
          resource: "#/components/schemas/ResourceJobSubject"
          collection: "#/components/schemas/CollectionJobSubject"

    JobSubjectType:
      title: JobSubjectType
      type: string
      enum:
        - resource
        - collection

    CollectionJobSubject:
      title: CollectionJobSubject
      type: object
      required:
        - resource
        - type
      properties:
        resource:
          type: string
        type:
          $ref: "#/components/schemas/JobSubjectType"
        query:
          type: object
        params:
          type: object

    ResourceJobSubject:
      title: ResourceJobSubject
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/JobSubjectType"

    DeleteRecordsJobConfig:
      title: DeleteRecordsJobConfig
      description: The configuration for a delete records job
      type: object
      required:
        - sheet
      properties:
        filter:
          $ref: "#/components/schemas/Filter"
        filterField:
          $ref: "#/components/schemas/FilterField"
        searchValue:
          $ref: "#/components/schemas/SearchValue"
        searchField:
          $ref: "#/components/schemas/SearchField"
        q:
          type: string
          description: FFQL query to filter records
        sheet:
          $ref: "#/components/schemas/SheetId"
        exceptions:
          type: array
          description: List of record ids to exclude from deletion
          items:
            $ref: "#/components/schemas/RecordId"
    FileJobConfig:
      title: FileJobConfig
      type: object
      required:
        - driver
      properties:
        driver:
          type: string
          description: The driver to use for extracting data from the file
          enum:
            - csv
        options:
          type: object
          description: Options for the driver
    PipelineJobConfig:
      title: PipelineJobConfig
      type: object
      required:
        - sourceSheetId
        - destinationSheetId
      properties:
        sourceSheetId:
          $ref: "#/components/schemas/SheetId"
        destinationSheetId:
          $ref: "#/components/schemas/SheetId"
    MappingProgramJobConfig:
      title: MappingProgramJobConfig
      type: object
      required:
        - sourceSheetId
        - destinationSheetId
        - mappingRules
      properties:
        sourceSheetId:
          $ref: "#/components/schemas/SheetId"
        destinationSheetId:
          $ref: "#/components/schemas/SheetId"
        mappingRules:
          type: array
          items:
            type: object
    ExportJobConfig:
      title: ExportJobConfig
      type: object
      required:
        - options
      properties:
        options:
          $ref: "#/components/schemas/ExportOptions"
    FindAndReplaceJobConfig:
      title: FindAndReplaceJobConfig
      type: object
      required:
        - find
        - replace
        - fieldKey
      properties:
        filter:
          $ref: "#/components/schemas/Filter"
        filterField:
          $ref: "#/components/schemas/FilterField"
        q:
          type: string
          description: FFQL query to filter records
        searchValue:
          $ref: "#/components/schemas/SearchValue"
        searchField:
          $ref: "#/components/schemas/SearchField"
        ids:
          description: The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
          type: array
          items:
            $ref: "#/components/schemas/RecordId"
        find:
          $ref: "#/components/schemas/Value"
        replace:
          $ref: "#/components/schemas/Value"
        fieldKey:
          type: string
          description: A unique key used to identify a field in a sheet
          example: first_name
    MutateJobConfig:
      title: MutateJobConfig
      type: object
      x-internal: true
      required:
        - sheetId
        - mutateRecord
      properties:
        sheetId:
          $ref: "#/components/schemas/SheetId"
        mutateRecord:
          type: string
          minLength: 6
          maxLength: 1000
          description: The raw source code `function mutateFunction(record) { ... }. It should return a record with the same 'shape' as the input record.`
        mutationId:
          type: string
        filter:
          $ref: "#/components/schemas/Filter"
        filterField:
          $ref: "#/components/schemas/FilterField"
        searchValue:
          $ref: "#/components/schemas/SearchValue"
        searchField:
          $ref: "#/components/schemas/SearchField"
        q:
          type: string
          description: FFQL query to filter records
        ids:
          description: The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
          type: array
          items:
            $ref: "#/components/schemas/RecordId"
    Plan:
      type: object
      title: JobExecutionPlan
      description: "The execution plan for a job, for example, for a map job, the execution plan is the mapping of the source sheet to the destination sheet."
      required:
        - fieldMapping
        - unmappedSourceFields
        - unmappedDestinationFields
      allOf:
        - $ref: "#/components/schemas/PlanConfig"
    PlanConfig:
      type: object
      title: JobExecutionPlanConfig
      description: "Used to update the execution plan for a mapping job."
      properties:
        fieldMapping:
          type: array
          title: Edges
          items:
            type: object
            title: Edge
            required:
              - sourceField
              - destinationField
            properties:
              sourceField:
                $ref: "#/components/schemas/FieldConfig"
              destinationField:
                $ref: "#/components/schemas/FieldConfig"
              preview:
                type: array
                items:
                  type: string
                  example: George Washington
              enumDetails:
                type: object
                title: EnumDetails
                description: Only available if one or more of the destination fields is of type enum. Provides category mapping.
                required:
                  - mapping
                  - unusedSourceValues
                  - unusedDestinationValues
                properties:
                  mapping:
                    type: array
                    title: EnumMapping
                    items:
                      type: object
                      title: EnumMappingField
                      properties:
                        sourceValue:
                          $ref: "#/components/schemas/Value"
                        destinationValue:
                          $ref: "#/components/schemas/Value"
                  unusedSourceValues:
                    type: array
                    items:
                      $ref: "#/components/schemas/Value"
                  unusedDestinationValues:
                    type: array
                    items:
                      $ref: "#/components/schemas/Value"
              metadata:
                type: object
                properties:
                  certainty:
                    $ref: "#/components/schemas/MappingCertainty"
                  confidence:
                    type: number
                  source:
                    type: string
        unmappedSourceFields:
          type: array
          title: SourceFields
          items:
            type: object
            title: SourceField
            required:
              - sourceField
            properties:
              sourceField:
                $ref: "#/components/schemas/FieldConfig"
              preview:
                type: array
                items:
                  type: string
                  example: George Washington
        unmappedDestinationFields:
          type: array
          title: DestinationFields
          items:
            type: object
            title: DestinationField
            required:
              - destinationField
            properties:
              destinationField:
                $ref: "#/components/schemas/FieldConfig"
              preview:
                type: array
                items:
                  type: string
        programId:
          type: string
          description: The id of the mapping program used to generate the plan
    JobPlan:
      title: Job execution plan
      description: The job/plan tuple that contains the full plan and the jobs status
      type: object
      required:
        - job
        - plan
      properties:
        job:
          $ref: "#/components/schemas/Job"
        plan:
          $ref: "#/components/schemas/Plan"
    MappingCertainty:
      type: string
      enum:
        - absolute
        - strong
        - moderate
        - weak
    MappingRuleType:
      type: string
      example: assign
    MappingRuleConfig:
      type: object
      title: MappingRuleConfig
      description: "Used to create a mapping rule."
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: The name of the mapping rule
        type:
          $ref: "#/components/schemas/MappingRuleType"
        config:
          type: object
    MappingRule:
      allOf:
        - $ref: "#/components/schemas/MappingRuleConfig"
        - type: object
          title: MappingRuleBase
          description: A base mapping rule
          required:
            - id
          properties:
            id:
              type: string
              description: The id of the mapping rule
            confidence:
              type: number
            createdBy:
              $ref: "#/components/schemas/UserId"
            createdAt:
              type: string
              format: date-time
              description: Date the item was created
            updatedAt:
              type: string
              format: date-time
              description: Date the item was last updated
            deletedAt:
              type: string
              format: date-time
              description: Date the item was deleted
    MappingProgram:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ProgramId"
        createdAt:
          type: string
          format: date-time
          description: Date the item was created
        createdBy:
          $ref: "#/components/schemas/UserId"
        rules:
          type: array
          items:
            $ref: "#/components/schemas/MappingRule"
        sourceKeys:
          type: array
          items:
            type: string
        destinationKeys:
          type: array
          items:
            type: string
        summary:
          type: object
          properties:
            totalRuleCount:
              type: number
            addedRuleCount:
              type: number
            deletedRuleCount:
              type: number
        accessToken:
          type: string
    GetFieldWeightsRequest:
      title: GetFieldWeightsRequest
      description: Request to get field weights
      type: object
      required:
        - sourceFields
        - destinationFields
      properties:
        sourceFields:
          type: array
          items:
            type: string
            description: The source field
        destinationFields:
          type: array
          items:
            type: string
            description: The destination field
    GetEnumWeightsRequest:
      title: GetEnumWeightsRequest
      description: Request to get enum weights
      type: object
      required:
        - sourceField
        - destinationField
        - sourceValues
        - destinationValues
      properties:
        sourceField:
          type: string
          description: The source field
        sourceValues:
          type: array
          items:
            type: string
            description: The source value
        destinationField:
          type: string
          description: The destination field
        destinationValues:
          type: array
          items:
            type: string
            description: The destination value
    SourceDestinationWeight:
      title: SourceDestinationWeight
      type: object
      properties:
        source:
          type: string
          description: The source key
          example: first_name
        destination:
          type: string
          description: The destination key
          example: firstName
        weight:
          type: number
          description: The weight
          example: 0.5
    JobStats:
      title: JobStats
      description: Statistics about Flatfile jobs
      type: object
      properties:
        start:
          type: string
          format: date-time
          description: The time these statistics started
        end:
          type: string
          format: date-time
          description: The cutoff point for these statistics
        jobs:
          type: object
          required:
            - map
          properties:
            map:
              type: object
              required:
                - created
                - completed
                - automated
                - failed
                - correctionsAverage
              properties:
                created:
                  type: integer
                  description: The total number of map jobs created
                completed:
                  type: integer
                  description: The number of jobs completed
                automated:
                  type: integer
                  description: The number of jobs completed without user input
                failed:
                  type: integer
                  description: The number of failed map jobs
                correctionsAverage:
                  type: number
                  description: The average number of field corrections made for each job, as a percentage of the total number of fields in the destination
        accounts:
          type: object
          properties:
            fewestAbandonedJobs:
              type: array
              items:
                $ref: "#/components/schemas/AccountId"
              description: The top performing accounts for this time period
            mostAbandonedJobs:
              type: array
              items:
                $ref: "#/components/schemas/AccountId"
              description: The accounts with the most trouble for this time period
    AgentStats:
      title: AgentStats
      description: Statistics about Flatfile agents
      type: object
      properties:
        start:
          type: string
          format: date-time
          description: The time these statistics started
        end:
          type: string
          format: date-time
          description: The cutoff point for these statistics
        executions:
          type: integer
          description: The total number of agent executions for this time period
        succeeded:
          type: integer
          description: The total number of successful agent executions for this time period
        failed:
          type: integer
    Workbook:
      title: Workbook
      description: A collection of one or more sheets
      type: object
      allOf:
        - $ref: "#/components/schemas/WorkbookUpdate"
      required:
        - id
        - name
        - spaceId
        - updatedAt
        - createdAt
        - environmentId
      properties:
        expiredAt:
          format: date-time
          type: string
          description: Date when workbook was expired
          example: "2022-09-11T18:04:35.979Z"
        sheets:
          type: array
          items:
            $ref: "#/components/schemas/Sheet"
    Sheet:
      title: Sheet
      description: A place to store tabular data
      type: object
      required:
        - id
        - name
        - workbookId
        - config
        - createdAt
        - updatedAt
      allOf:
        - $ref: "#/components/schemas/SheetUpdate"
    SheetUpdate:
      title: Sheet Update
      description: Changes to make to an existing sheet
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SheetId"
        workbookId:
          $ref: "#/components/schemas/WorkbookId"
        name:
          type: string
        config:
          $ref: "#/components/schemas/SheetConfig"
        countRecords:
          $ref: "#/components/schemas/RecordCounts"
        namespace:
          type: string
        lockedBy:
          type: string
        createdAt:
          description: Date the sheet was created
          type: string
          format: date-time
        updatedAt:
          description: Date the sheet was last updated
          type: string
          format: date-time
        lockedAt:
          description: Date the sheet was locked
          type: string
          format: date-time
    SheetConfigOrUpdate:
      title: Sheet Update
      description: Changes to make to an existing sheet
      anyOf:
        - $ref: "#/components/schemas/SheetConfig"
        - $ref: "#/components/schemas/SheetUpdate"
    Commit:
      title: Commit Version
      description: A commit version
      type: object
      required:
        - id
        - sheetId
        - createdAt
        - createdBy
      properties:
        id:
          $ref: "#/components/schemas/CommitId"
        sheetId:
          $ref: "#/components/schemas/SheetId"
        createdBy:
          description: The id of the actor who created the commit
          type: string
        completedBy:
          description: The id of the actor who completed the commit
          type: string
        createdAt:
          description: Date the commit was created
          type: string
          format: date-time
        completedAt:
          description: Date the commit was completed
          type: string
          format: date-time
    Snapshot:
      title: Snapshot
      description: A snapshot of a sheet
      type: object
      required:
        - id
        - sheetId
        - createdAt
        - createdBy
      properties:
        id:
          $ref: "#/components/schemas/SnapshotId"
        sheetId:
          $ref: "#/components/schemas/SheetId"
        label:
          type: string
        summary:
          type: object
          required:
            - createdSince
            - deletedSince
            - updatedSince
          properties:
            createdSince:
              type: object
              required:
                - total
              properties:
                total:
                  type: integer
            deletedSince:
              type: object
              required:
                - total
              properties:
                total:
                  type: integer
            updatedSince:
              type: object
              required:
                - total
              properties:
                total:
                  type: integer
                byField:
                  type: object
                  additionalProperties:
                    type: number
        createdAt:
          description: Date the snapshot was created
          type: string
          format: date-time
        createdBy:
          description: The id of the user who created the snapshot
          type: string
    GetRecordsResponseData:
      title: GetRecordsResponseData
      description: A list of records with optional record counts
      allOf:
        - $ref: "#/components/schemas/Success"
        - type: object
          required:
            - records
          properties:
            records:
              $ref: "#/components/schemas/RecordsWithLinks"
            counts:
              $ref: "#/components/schemas/RecordCounts"
            versionId:
              $ref: "#/components/schemas/VersionId"
            commitId:
              $ref: "#/components/schemas/CommitId"
    RecordsResponseData:
      title: RecordsResponseData
      allOf:
        - $ref: "#/components/schemas/Success"
        - type: object
          properties:
            records:
              $ref: "#/components/schemas/RecordsWithLinks"
            counts:
              $ref: "#/components/schemas/RecordCounts"
            versionId:
              $ref: "#/components/schemas/VersionId"
            commitId:
              $ref: "#/components/schemas/CommitId"
    DiffRecordsResponseData:
      title: DiffRecordsResponseData
      type: array
      items:
        $ref: "#/components/schemas/DiffRecord"
    RecordCountsResponseData:
      title: RecordCountsResponseData
      description: "'total', 'valid', and 'error' record counts. Optionally returns error count by field."
      allOf:
        - $ref: "#/components/schemas/Success"
        - type: object
          required:
            - counts
          properties:
            counts:
              $ref: "#/components/schemas/RecordCounts"
    SortField:
      type: string
      description: Name of field by which to sort records
    SortDirection:
      type: string
      description: Sort direction - asc (ascending) or desc (descending)
      enum:
        - asc
        - desc
    Filter:
      type: string
      description: Options to filter records
      enum:
        - valid
        - error
        - all
        - none
    FilterField:
      type: string
      description: Use this to narrow the valid/error filter results to a specific field
    SearchValue:
      type: string
      description: "Search the entire sheet for the given value, returning matching rows"
    SearchField:
      type: string
      description: Use this to narrow the searchValue results to a specific field
    WorkbookConfig:
      title: Workbook Configuration
      description: Properties used to create a new Workbook
      type: object
      required:
        - name
      properties:
        name:
          type: string
        labels:
          type: array
          items:
            type: string
        spaceId:
          $ref: "#/components/schemas/SpaceId"
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        sheets:
          x-internal: true
          type: array
          items:
            $ref: "#/components/schemas/SheetConfig"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
        settings:
          $ref: "#/components/schemas/WorkbookConfigSettings"
        metadata:
          type: object
          description: Metadata for the workbook
          additionalProperties: true
    WorkbookConfigSettings:
      title: Workbook Config Settings
      description: Settings for a workbook
      type: object
      properties:
        trackChanges:
          type: boolean
          description: Whether to track changes for this workbook. Defaults to false. Tracking changes on a workbook allows for disabling workbook and sheet actions while data in the workbook is still being processed. You must run a recordHook listener if you enable this feature.
          default: false
    WorkbookUpdate:
      title: Workbook Update
      description: Properties used to update an existing Workbook
      type: object
      properties:
        id:
          $ref: "#/components/schemas/WorkbookId"
        name:
          type: string
        spaceId:
          $ref: "#/components/schemas/SpaceId"
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
        sheets:
          type: array
          items:
            $ref: "#/components/schemas/SheetConfigOrUpdate"
        labels:
          type: array
          items:
            type: string
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
        settings:
          $ref: "#/components/schemas/WorkbookConfigSettings"
        updatedAt:
          description: Date the workbook was last updated
          type: string
          format: date-time
        createdAt:
          description: Date the workbook was created
          type: string
          format: date-time
        namespace:
          type: string
        metadata:
          type: object
          description: Metadata for the workbook
          additionalProperties: true
    SheetConfig:
      description: Describes shape of data as well as behavior
      required:
        - name
        - fields
      allOf:
        - $ref: ./packages/blueprint/properties.yaml#/components/schemas/SheetConfigOptions
    FieldConfig:
      $ref: ./packages/blueprint/properties.yaml#/components/schemas/Property
    RecordsWithLinks:
      title: RecordsWithLinks
      description: "List of Record objects, including links to related rows"
      type: array
      items:
        $ref: "#/components/schemas/RecordWithLinks"
    RecordWithLinks:
      title: RecordWithLinks
      description: "A single row of data in a Sheet, including links to related rows"
      type: object
      required:
        - id
        - values
      properties:
        id:
          $ref: "#/components/schemas/RecordId"
        versionId:
          $ref: "#/components/schemas/VersionId"
        commitId:
          $ref: "#/components/schemas/CommitId"
        values:
          $ref: "#/components/schemas/RecordDataWithLinks"
        valid:
          type: boolean
          example: true
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ValidationMessage"
        metadata:
          type: object
    RecordDataWithLinks:
      title: RecordDataWithLinks
      description: "A single row of data in a Sheet, including links to related rows"
      type: object
      additionalProperties:
        $ref: "#/components/schemas/CellValueWithLinks"
    CellValueWithLinks:
      title: CellValueWithLinks
      type: object
      allOf:
        - $ref: "#/components/schemas/CellValue"
      properties:
        links:
          $ref: "#/components/schemas/Records"
    Record:
      title: Record
      description: A single row of data in a Sheet
      type: object
      required:
        - id
        - values
      properties:
        id:
          $ref: "#/components/schemas/RecordId"
        versionId:
          $ref: "#/components/schemas/VersionId"
        commitId:
          $ref: "#/components/schemas/CommitId"
        values:
          $ref: "#/components/schemas/RecordData"
        valid:
          type: boolean
          example: true
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ValidationMessage"
        metadata:
          type: object
    DiffRecord:
      title: DiffRecord
      description: A single row of data in a Snapshot comparison
      type: object
      allOf:
        - $ref: "#/components/schemas/Record"
      required:
        - values
      properties:
        values:
          $ref: "#/components/schemas/DiffData"
    Records:
      title: Records
      description: List of Record objects
      type: array
      items:
        $ref: "#/components/schemas/Record"
    RecordCounts:
      title: Record Counts
      type: object
      required:
        - total
        - valid
        - error
      properties:
        total:
          type: number
        valid:
          type: number
        error:
          type: number
        errorsByField:
          type: object
          additionalProperties:
            type: number
    RecordsData:
      title: RecordsData
      description: Array of record data
      type: array
      items:
        $ref: "#/components/schemas/RecordData"
    RecordData:
      title: RecordData
      description: A single row of data in a Sheet
      type: object
      additionalProperties:
        $ref: "#/components/schemas/CellValue"
    DiffData:
      title: DiffData
      description: A single row of data in a Snapshot comparison
      type: object
      additionalProperties:
        $ref: "#/components/schemas/DiffValue"
    CellValueWithCounts:
      type: object
      allOf:
        - $ref: "#/components/schemas/CellValue"
        - type: object
          properties:
            counts:
              $ref: "#/components/schemas/RecordCounts"
    CellValue:
      title: CellValue
      type: object
      required:
        - value
      properties:
        value:
          $ref: "#/components/schemas/Value"
        valid:
          type: boolean
          example: true
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ValidationMessage"
        layer:
          type: string
          example: "source"
        updatedAt:
          type: string
          format: date-time
          nullable: true
    DiffValue:
      title: DiffValue
      type: object
      allOf:
        - $ref: "#/components/schemas/CellValue"
      properties:
        snapshotValue:
          $ref: "#/components/schemas/Value"
    RecordsUpdates:
      title: RecordsUpdates
      description: Array of record updates
      type: array
      items:
        $ref: "#/components/schemas/RecordUpdates"
    RecordUpdates:
      title: RecordUpdates
      description: Record id and values to be updated
      type: object
      allOf:
        - type: object
          properties:
            versionId:
              $ref: "#/components/schemas/VersionId"
            commitId:
              $ref: "#/components/schemas/CommitId"
        - $ref: "#/components/schemas/Record"
    CellsResponseData:
      title: CellsResponseData
      description: Cell values grouped by field key
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/CellValueWithCounts"
    ValidationMessage:
      title: Validation Message
      description: Record data validation messages
      type: object
      properties:
        type:
          type: string
          enum:
            - error
            - warn
            - info
          example:
            - info
        source:
          type: string
          enum:
            - required-constraint
            - unique-constraint
            - custom-logic
            - unlinked
            - invalid-option
            - is-artifact
          example:
            - custom-logic
        message:
          type: string
          example: Automatically cast to number
    SpaceAccess:
      type: string
      enum:
        - "*"
        - "upload"
    GenerateMutationConfig:
      title: GenerateMutationConfig
      description: Properties used by the AI to generate a mutation
      x-internal: true
      type: object
      required:
        - sheetId
        - command
      properties:
        sheetId:
          $ref: "#/components/schemas/SheetId"
        model:
          type: string
          description: The name of the model to use
        modelParams:
          type: object
          description: The parameters to pass to the model
        command:
          type: string
          description: The command to feed to the model
        templateVariables:
          type: object
          description: The variables to pass to the template
    GeneratedMutation:
      title: GeneratedMutation
      description: A mutation generated by the AI
      x-internal: true
      type: object
      required:
        - mutateRecord
        - metadata
        - mutationId
      properties:
        mutateRecord:
          type: string
          description: The function to mutate the record, it will be generated by AI not by you.
        metadata:
          $ref: "#/components/schemas/GeneratedMutationMetadata"
        mutationId:
          type: string
    GeneratedMutationMetadata:
      title: GeneratedMutationMetadata
      description: Metadata returned by the model, it will be generated by AI not by you.
      x-internal: true
      type: object
      required:
        - explain
      properties:
        explain:
          type: string
          description: An explanation of the mutation in markdown form
    GenerateQueryConfig:
      title: GenerateQueryConfig
      description: Properties used by the AI to generate a query
      x-internal: true
      type: object
      required:
        - sheetId
        - command
      properties:
        sheetId:
          $ref: "#/components/schemas/SheetId"
        model:
          type: string
          description: The name of the model to use
        modelParams:
          type: object
          description: The parameters to pass to the model
        command:
          type: string
          description: The command to feed to the model
        queryType:
          type: string
          description: The type of query to generate
        templateVariables:
          type: object
          description: The variables to pass to the template
    GeneratedQuery:
      title: GeneratedQuery
      description: A query generated by the AI
      x-internal: true
      type: object
      required:
        - query
        - queryId
        - queryType
        - metadata
      properties:
        query:
          type: string
          description: The query, it will be generated by AI not by you.
        queryType:
          type: string
          description: The type of query that was generated (e.g. SQL, FFQL, etc)
        metadata:
          $ref: "#/components/schemas/GeneratedQueryMetadata"
        queryId:
          type: string
    GeneratedQueryMetadata:
      title: GeneratedQueryMetadata
      description: Metadata returned by the model, it will be generated by AI not by you.
      x-internal: true
      type: object
      required:
        - explain
      properties:
        explain:
          type: string
          description: An explanation of the query in markdown form
    StripePriceTier:
      title: StripePriceTier
      description: A price tier as returned by Stripe
      x-internal: true
      type: object
      required:
        - unitAmount
        - upTo
      properties:
        unitAmount:
          type: number
          example: 1000
        upTo:
          type: number
          example: 500
    StripePrice:
      title: StripePrice
      description: A price as returned by Stripe
      x-internal: true
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: "price_1NAjHYDQpFTJUnbkakhbQLQY"
        unitAmount:
          type: number
          example: 1000
        tiers:
          type: array
          items:
            $ref: "#/components/schemas/StripePriceTier"
    StripeMetadata:
      title: StripeMetadata
      description: Metadata attached to a Stripe Product
      x-internal: true
      type: object
      properties:
        canSelfServe:
          type: string
          example: "true"
        commitment:
          type: string
          example: "500 files"
        isDefaultSelection:
          type: string
          example: "true"
        interval:
          type: string
          example: "month"
        planType:
          type: string
          example: "professional"
        platform:
          type: string
          example: "X"
        prepayId:
          type: string
          example: "prod_O4BSPhl1vZKpIJ"
        proOnly:
          type: string
          example: "true"
        productType:
          type: string
          example: "usage"
        unitLabel:
          type: string
          example: "file"
        usageType:
          type: string
          example: "file"
    Product:
      title: StripeProduct
      description: A product as returned by Stripe
      x-internal: true
      type: object
      required:
        - id
        - defaultPrice
        - description
        - metadata
        - name
      properties:
        id:
          type: string
          example: "prod_NwcWC0r3cZLzWe"
        defaultPrice:
          $ref: "#/components/schemas/StripePrice"
        description:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
        metadata:
          $ref: "#/components/schemas/StripeMetadata"
        name:
          type: string
          example: "X Project Space: Base"
    CheckoutSession:
      title: CheckoutSession
      description: A Checkout Session as returned by Stripe
      x-internal: true
      type: object
      additionalProperties: true
      properties:
        id:
          type: string
          example: "cs_test_a1Zv5bJvq4pN3Gbt6rWYLpbd80ZEgFNgtggAM1i40ovUTSgjeFBmSfMJwB"
        object:
          type: string
          example: "checkout.session"
    LineItem:
      title: LineItems
      description: A line item passed to a checkout session or subscription
      x-internal: true
      type: object
      properties:
        price:
          type: string
          example: "price_12987ysdfba89s7rf"
        quantity:
          type: integer
          example: 1
    BillingSubscription:
      title: BillingSubscription
      description: A subscription
      x-internal: true
      type: object
      additionalProperties: true
      required:
        - id
        - stripeSubscriptionId
        - status
        - accountId
        - items
      properties:
        id:
          $ref: "#/components/schemas/BillingSubscriptionId"
        stripeSubscriptionId:
          type: string
          example: "sub_1234567890"
        status:
          type: string
          example: ACTIVE
        accountId:
          $ref: "#/components/schemas/AccountId"
        items:
          type: array
          items:
            $ref: "#/components/schemas/BillingSubscriptionItem"
    BillingSubscriptionItem:
      title: BillingSubscriptionItem
      description: A subscription item
      x-internal: true
      type: object
      additionalProperties: true
      required:
        - price
        - product
        - quantity
      properties:
        price:
          $ref: "#/components/schemas/StripePrice"
        product:
          $ref: "#/components/schemas/Product"
        quantity:
          type: number
    BillingPlanWithUsage:
      title: BillingPlanWithUsage
      description: A billing plan with usage
      x-internal: true
      type: object
      required:
        - accountId
        - plan
        - pdvs
        - files
        - fromDate
        - toDate
        - freeFileLimit
        - freePdvLimit
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        plan:
          type: string
        pdvs:
          type: number
        files:
          type: number
        fromDate:
          type: string
          format: date-time
        toDate:
          type: string
          format: date-time
        freeFileLimit:
          type: number
        freePdvLimit:
          type: number
    BillingLimits:
      title: BillingLimits
      description: Billing limits
      x-internal: true
      type: object
      required:
        - fromDate
        - toDate
        - fileUploadIsLockedUntilPayment
        - sheetIsLockedUntilPayment
      properties:
        fromDate:
          type: string
          format: date-time
        toDate:
          type: string
          format: date-time
        fileUploadIsLockedUntilPayment:
          type: boolean
        sheetIsLockedUntilPayment:
          type: boolean
    ConnectionLink:
      title: ConnectionLink
      description: A Connection Link token as returned by Merge
      x-internal: true
      type: object
      additionalProperties: true
      properties:
        token:
          type: string
          example: "a_token"
    # Data Retention Policies
    DataRetentionPolicyEnum:
      type: string
      description: The type of data retention policy for environments
      enum:
        - lastActivity
        - sinceCreated
      example: lastActivity
    DataRetentionPolicyConfig:
      title: DataRetentionPolicyConfig
      description: Properties used to create and update data retention policies
      type: object
      required:
        - type
        - period
        - environmentId
      properties:
        type:
          $ref: "#/components/schemas/DataRetentionPolicyEnum"
        period:
          type: integer
          description: The duration, in days, for which the data retention policy is applied. Specifies the timeframe onto which the data retention policy is executed.
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
    DataRetentionPolicyConfigUpdate:
      title: DataRetentionPolicyConfigUpdate
      description: Properties used to update data retention policies
      type: object
      properties:
        type:
          $ref: "#/components/schemas/DataRetentionPolicyEnum"
        period:
          type: integer
          description: The duration, in days, for which the data retention policy is applied. Specifies the timeframe onto which the data retention policy is executed.
        environmentId:
          $ref: "#/components/schemas/EnvironmentId"
    DataRetentionPolicy:
      title: DataRetentionPolicy
      description: A data retention policy belonging to an environment
      type: object
      allOf:
        - $ref: "#/components/schemas/DataRetentionPolicyConfig"
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/DataRetentionPolicyId"
        createdAt:
          type: string
          format: date-time
          description: Date when data retention policy was created
          example: "2022-09-11T18:04:35.979Z"
        updatedAt:
          type: string
          format: date-time
          description: Date when data retention policy was updated
          example: "2022-09-11T18:04:35.979Z"
