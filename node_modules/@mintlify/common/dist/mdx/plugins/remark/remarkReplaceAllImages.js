import isAbsoluteUrl from 'is-absolute-url';
import path from 'path';
import { visit } from 'unist-util-visit';
import { removeBasePath } from '../../../fs/removeBasePath.js';
import { getS3URI } from '../../../services/aws.js';
export const remarkReplaceAllImages = (subdomain, filePath, basePath) => {
    const imagesUriPath = (imagePath) => {
        if (imagePath.startsWith('/')) {
            const path = removeBasePath(imagePath, basePath);
            return getS3URI(subdomain, path);
        }
        const beforeFilePath = path.join(filePath, '../');
        const relativePath = removeBasePath(path.join(beforeFilePath, imagePath), basePath);
        return getS3URI(subdomain, relativePath);
    };
    return (tree) => {
        visit(tree, (node) => {
            var _a;
            if (node == null) {
                return;
            }
            if (node.name === 'img' || node.name === 'source' || node.name === 'video') {
                const srcAttrIndex = node.attributes.findIndex((attr) => attr.name === 'src');
                const nodeUrl = (_a = node.attributes[srcAttrIndex]) === null || _a === void 0 ? void 0 : _a.value;
                if (!nodeUrl) {
                    return;
                }
                if (
                // <img/> component
                srcAttrIndex !== -1 &&
                    !isAbsoluteUrl(nodeUrl) &&
                    !isDataString(nodeUrl)) {
                    node.attributes[srcAttrIndex].value = imagesUriPath(nodeUrl);
                }
            }
            else if (
            // ![]() format
            node.type === 'image' &&
                node.url &&
                !isAbsoluteUrl(node.url) &&
                !isDataString(node.url)) {
                node.url = imagesUriPath(node.url);
            }
        });
        return tree;
    };
};
const isDataString = (str) => str.startsWith('data:');
