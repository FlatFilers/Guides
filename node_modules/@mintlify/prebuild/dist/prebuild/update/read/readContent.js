import { hasImports, findAndRemoveImports, getDecoratedNavPageAndSlug } from '@mintlify/common';
import { promises as _promises } from 'fs';
import { join } from 'path';
import { preparseMdx } from '../../../createPage/preparseMdx/index.js';
const { readFile } = _promises;
export const readPageContents = async (contentDirectoryPath, openApiFiles, contentFilenames) => {
    const pagesAcc = {};
    const filesWithImports = [];
    const pagePromises = contentFilenames.map(async (filename) => {
        const sourcePath = join(contentDirectoryPath, filename);
        const targetPath = join('src', '_props', filename);
        const contentStr = (await readFile(sourcePath)).toString();
        // if is snippet add to static file array
        const fileContent = await preparseMdx(contentStr, contentDirectoryPath, sourcePath);
        const importsResponse = await findAndRemoveImports(fileContent);
        if (hasImports(importsResponse)) {
            filesWithImports.push({
                ...importsResponse,
                filename,
            });
            return;
        }
        const { slug, pageMetadata } = getDecoratedNavPageAndSlug(filename, contentStr, openApiFiles);
        pagesAcc[slug] = pageMetadata;
        return { targetPath, fileContent };
    });
    const mdxFilesWithNoImports = (await Promise.all(pagePromises)).filter((item) => item !== undefined);
    return { mdxFilesWithNoImports, pagesAcc, filesWithImports };
};
export const readSnippetsV2Contents = (contentDirectoryPath, snippetV2Filenames) => {
    const snippetV2Promises = snippetV2Filenames.map(async (filename) => {
        const sourcePath = join(contentDirectoryPath, filename);
        const contentStr = await readFile(sourcePath, 'utf8');
        const fileContent = await preparseMdx(contentStr, contentDirectoryPath, sourcePath);
        return { filename, content: fileContent };
    });
    return Promise.all(snippetV2Promises);
};
